"""added prefix column in server class

Revision ID: e5704172165a
Revises: 
Create Date: 2022-06-19 22:38:57.973865

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "e5704172165a"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("server")
    op.drop_index("ix_reaction_roles_custom_id", table_name="reaction_roles")
    op.drop_index("ix_reaction_roles_jump_url", table_name="reaction_roles")
    op.drop_index("ix_reaction_roles_limit_to_one", table_name="reaction_roles")
    op.drop_index("ix_reaction_roles_message_id", table_name="reaction_roles")
    op.drop_index("ix_reaction_roles_server_id", table_name="reaction_roles")
    op.drop_table("reaction_roles")
    op.drop_table("user")
    op.drop_table("premium")
    op.drop_index("ix_reminders_expires", table_name="reminders")
    op.drop_index("ix_reminders_id", table_name="reminders")
    op.drop_table("reminders")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "reminders",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "expires", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "created", postgresql.TIMESTAMP(), autoincrement=False, nullable=False
        ),
        sa.Column("event", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column(
            "extra",
            postgresql.JSON(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id", name="reminders_pkey"),
    )
    op.create_index("ix_reminders_id", "reminders", ["id"], unique=False)
    op.create_index("ix_reminders_expires", "reminders", ["expires"], unique=False)
    op.create_table(
        "premium",
        sa.Column(
            "id",
            sa.BIGINT(),
            server_default=sa.text("nextval('premium_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("name", sa.VARCHAR(length=250), autoincrement=False, nullable=False),
        sa.Column(
            "reaction_roles_amount", sa.SMALLINT(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "reminders_amount", sa.SMALLINT(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "reminder_amount_per_user",
            sa.SMALLINT(),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("no_vote_locked", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column(
            "configurable_prefix", sa.BOOLEAN(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "no_of_servers_applicable",
            sa.SMALLINT(),
            autoincrement=False,
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name="premium_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "user",
        sa.Column(
            "id",
            sa.BIGINT(),
            server_default=sa.text("nextval('user_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("premium_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "premium_expiry", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column("blacklisted", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["premium_id"], ["premium.id"], name="user_premium_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="user_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "reaction_roles",
        sa.Column("message_id", sa.BIGINT(), autoincrement=True, nullable=False),
        sa.Column("server_id", sa.BIGINT(), autoincrement=False, nullable=False),
        sa.Column(
            "reactions",
            postgresql.JSON(astext_type=sa.Text()),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("limit_to_one", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column(
            "custom_id", sa.VARCHAR(length=250), autoincrement=False, nullable=False
        ),
        sa.Column(
            "jump_url", sa.VARCHAR(length=500), autoincrement=False, nullable=False
        ),
        sa.PrimaryKeyConstraint("message_id", name="reaction_roles_pkey"),
    )
    op.create_index(
        "ix_reaction_roles_server_id", "reaction_roles", ["server_id"], unique=False
    )
    op.create_index(
        "ix_reaction_roles_message_id", "reaction_roles", ["message_id"], unique=False
    )
    op.create_index(
        "ix_reaction_roles_limit_to_one",
        "reaction_roles",
        ["limit_to_one"],
        unique=False,
    )
    op.create_index(
        "ix_reaction_roles_jump_url", "reaction_roles", ["jump_url"], unique=False
    )
    op.create_index(
        "ix_reaction_roles_custom_id", "reaction_roles", ["custom_id"], unique=False
    )
    op.create_table(
        "server",
        sa.Column("id", sa.BIGINT(), autoincrement=True, nullable=False),
        sa.Column(
            "premium_applier_user_id", sa.INTEGER(), autoincrement=False, nullable=True
        ),
        sa.Column("blacklisted", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column(
            "show_404_commands_error", sa.BOOLEAN(), autoincrement=False, nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["premium_applier_user_id"],
            ["user.id"],
            name="server_premium_applier_user_id_fkey",
        ),
        sa.PrimaryKeyConstraint("id", name="server_pkey"),
    )
    # ### end Alembic commands ###
