:py:mod:`lib.util`
==================

.. py:module:: lib.util


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   context/index.rst
   privacy_vote/index.rst
   request_handler/index.rst
   vars/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   lib.util.MemberID
   lib.util.ChannelAndMessageId
   lib.util.Tokens
   lib.util.ConfirmationView
   lib.util.Context
   lib.util.LinksAndVars
   lib.util.VotingMenu
   lib.util.PrivacyPolicy
   lib.util.MenuSource
   lib.util.ShinobiMatch
   lib.util.ChannelAndMessageId
   lib.util.Tokens
   lib.util.LinksAndVars
   lib.util.RaidMode
   lib.util.Webhooks
   lib.util.Database
   lib.util.Methods
   lib.util.Methods
   lib.util.Tokens
   lib.util.LinksAndVars



Functions
~~~~~~~~~

.. autoapisummary::

   lib.util.token_get
   lib.util.token_get
   lib.util.post_handler
   lib.util.ratelimit_handler
   lib.util.post_commands



Attributes
~~~~~~~~~~

.. autoapisummary::

   lib.util.BASE_DIR
   lib.util.dotenv_file
   lib.util.api_image_store_dir
   lib.util.DEFAULT_COMMAND_SELECT_LENGTH
   lib.util.LATTICES
   lib.util.IMAGES
   lib.util.UNITS
   lib.util.minato_gif
   lib.util.among_us
   lib.util.url_regex
   lib.util.log
   lib.util.ch
   lib.util.formatter
   lib.util.FATESLIST_BASE_URI
   lib.util.DISCORD_SERVERVICES_BASE_URI


.. py:class:: MemberID

   Bases: :py:obj:`discord.ext.commands.Converter`

   The base class of custom converters that require the :class:`.Context`
   to be passed to be useful.

   This allows you to implement converters that function similar to the
   special cased ``discord`` classes.

   Classes that derive from this should override the :meth:`~.Converter.convert`
   method to do its conversion logic. This method must be a :ref:`coroutine <coroutine>`.

   .. py:method:: convert(self, ctx, argument)
      :async:

      |coro|

      The method to override to do conversion logic.

      If an error is found while converting, it is recommended to
      raise a :exc:`.CommandError` derived exception as it will
      properly propagate to the error handlers.

      :param ctx: The invocation context that the argument is being used in.
      :type ctx: :class:`.Context`
      :param argument: The argument that is being converted.
      :type argument: :class:`str`

      :raises CommandError: A generic exception occurred when converting the argument.
      :raises BadArgument: The converter failed to convert the argument.



.. py:class:: ChannelAndMessageId

   Bases: :py:obj:`enum.IntEnum`

   Enum where members are also (and must be) ints

   .. py:attribute:: badges_channel
      :annotation: = 920536143458598930

      

   .. py:attribute:: backup_channel
      :annotation: = 922544732918415390

      

   .. py:attribute:: error_logs_channel
      :annotation: = 920190310942908513

      

   .. py:attribute:: server_id
      :annotation: = 920190307595874304

      

   .. py:attribute:: server_id2
      :annotation: = 920536143244709889

      

   .. py:attribute:: restartlog_channel1
      :annotation: = 920190310942908508

      

   .. py:attribute:: restartlog_channel2
      :annotation: = 920536143458598926

      

   .. py:attribute:: serverlog_channel1
      :annotation: = 920190310942908509

      

   .. py:attribute:: serverlog_channel2
      :annotation: = 920536143458598927

      


.. py:class:: Tokens

   Bases: :py:obj:`enum.Enum`

   Generic enumeration.

   Derive from this class to define new enumerations.

   .. py:attribute:: statcord
      

      

   .. py:attribute:: dagpi
      

      

   .. py:attribute:: chatbot
      

      

   .. py:attribute:: sentry_link
      

      

   .. py:attribute:: tenor
      

      

   .. py:attribute:: giphy
      

      

   .. py:attribute:: token
      

      

   .. py:attribute:: weather
      

      


.. py:class:: ConfirmationView(*, timeout, author_id, ctx, delete_after)

   Bases: :py:obj:`discord.ui.View`

   Represents a UI view.

   This object must be inherited to create a UI within Discord.

   .. versionadded:: 2.0

   :param timeout: Timeout in seconds from last interaction with the UI before no longer accepting input.
                   If ``None`` then there is no timeout.
   :type timeout: Optional[:class:`float`]

   .. py:method:: interaction_check(self, interaction)
      :async:

      |coro|

      A callback that is called when an interaction happens within the view
      that checks whether the view should process item callbacks for the interaction.

      This is useful to override if, for example, you want to ensure that the
      interaction author is a given user.

      The default implementation of this returns ``True``.

      .. note::

          If an exception occurs within the body then the check
          is considered a failure and :meth:`on_error` is called.

      :param interaction: The interaction that occurred.
      :type interaction: :class:`~discord.Interaction`

      :returns: Whether the view children's callbacks should be called.
      :rtype: :class:`bool`


   .. py:method:: on_timeout(self)
      :async:

      |coro|

      A callback that is called when a view's timeout elapses without being explicitly stopped.


   .. py:method:: confirm(self, button, interaction)
      :async:


   .. py:method:: cancel(self, button, interaction)
      :async:



.. py:class:: Context(*, message, bot, view, args = MISSING, kwargs = MISSING, prefix = None, command = None, invoked_with = None, invoked_parents = MISSING, invoked_subcommand = None, subcommand_passed = None, command_failed = False, current_parameter = None, current_argument = None, interaction = None)

   Bases: :py:obj:`discord.ext.commands.Context`

   Represents the context in which a command is being invoked under.

   This class contains a lot of meta data to help you understand more about
   the invocation context. This class is not created manually and is instead
   passed around to commands as the first parameter.

   This class implements the :class:`~discord.abc.Messageable` ABC.

   .. attribute:: message

      The message that triggered the command being executed.

      .. note::

          In the case of an interaction based context, this message is "synthetic"
          and does not actually exist. Therefore, the ID on it is invalid similar
          to ephemeral messages.

      :type: :class:`.Message`

   .. attribute:: bot

      The bot that contains the command being executed.

      :type: :class:`.Bot`

   .. attribute:: args

      The list of transformed arguments that were passed into the command.
      If this is accessed during the :func:`.on_command_error` event
      then this list could be incomplete.

      :type: :class:`list`

   .. attribute:: kwargs

      A dictionary of transformed arguments that were passed into the command.
      Similar to :attr:`args`\, if this is accessed in the
      :func:`.on_command_error` event then this dict could be incomplete.

      :type: :class:`dict`

   .. attribute:: current_parameter

      The parameter that is currently being inspected and converted.
      This is only of use for within converters.

      .. versionadded:: 2.0

      :type: Optional[:class:`Parameter`]

   .. attribute:: current_argument

      The argument string of the :attr:`current_parameter` that is currently being converted.
      This is only of use for within converters.

      .. versionadded:: 2.0

      :type: Optional[:class:`str`]

   .. attribute:: interaction

      The interaction associated with this context.

      .. versionadded:: 2.0

      :type: Optional[:class:`~discord.Interaction`]

   .. attribute:: prefix

      The prefix that was used to invoke the command. For interaction based contexts,
      this is ``/`` for slash commands and ``\u200b`` for context menu commands.

      :type: Optional[:class:`str`]

   .. attribute:: command

      The command that is being invoked currently.

      :type: Optional[:class:`Command`]

   .. attribute:: invoked_with

      The command name that triggered this invocation. Useful for finding out
      which alias called the command.

      :type: Optional[:class:`str`]

   .. attribute:: invoked_parents

      The command names of the parents that triggered this invocation. Useful for
      finding out which aliases called the command.

      For example in commands ``?a b c test``, the invoked parents are ``['a', 'b', 'c']``.

      .. versionadded:: 1.7

      :type: List[:class:`str`]

   .. attribute:: invoked_subcommand

      The subcommand that was invoked.
      If no valid subcommand was invoked then this is equal to ``None``.

      :type: Optional[:class:`Command`]

   .. attribute:: subcommand_passed

      The string that was attempted to call a subcommand. This does not have
      to point to a valid registered subcommand and could just point to a
      nonsense string. If nothing was passed to attempt a call to a
      subcommand then this is set to ``None``.

      :type: Optional[:class:`str`]

   .. attribute:: command_failed

      A boolean that indicates if the command failed to be parsed, checked,
      or invoked.

      :type: :class:`bool`

   .. py:method:: entry_to_code(self, entries)
      :async:


   .. py:method:: indented_entry_to_code(self, entries)
      :async:


   .. py:method:: __repr__(self)

      Return repr(self).


   .. py:method:: session(self)
      :property:


   .. py:method:: replied_reference(self)


   .. py:method:: disambiguate(self, matches, entry)
      :async:


   .. py:method:: prompt(self, message, *, timeout = 60.0, delete_after = True, author_id = None)
      :async:

      An interactive reaction confirmation dialog.
      :param message: The message to show along with the prompt.
      :type message: str
      :param timeout: How long to wait before returning.
      :type timeout: float
      :param delete_after: Whether to delete the confirmation message after we're done.
      :type delete_after: bool
      :param author_id: The member who should respond to the prompt. Defaults to the author of the
                        Context's message.
      :type author_id: Optional[int]

      :returns: ``True`` if explicit confirm,
                ``False`` if explicit deny,
                ``None`` if deny due to timeout
      :rtype: Optional[bool]


   .. py:method:: show_help(self, command=None)
      :async:

      Shows the help command for the specified command if given.
      If no command is given, then it'll show help for the current
      command.


   .. py:method:: safe_send(self, content, *, escape_mentions=True, **kwargs)
      :async:

      Same as send except with some safe guards.
      1) If the message is too long then it sends a file with the results instead.
      2) If ``escape_mentions`` is ``True`` then it escapes mentions.


   .. py:method:: get_user(self, user)


   .. py:method:: get_dm(self, user)
      :async:


   .. py:method:: get_roles(self, role)


   .. py:method:: get_emoji(self, emoji)


   .. py:method:: get_guild(self, guild)


   .. py:method:: get_config_emoji_by_name_or_id(self, emoji)


   .. py:method:: get_config_channel_by_name_or_id(self, channel)


   .. py:method:: get_random_image_from_tag(tag_name)
      :staticmethod:


   .. py:method:: get_random_image_from_tag(tag_name)
      :staticmethod:
      :async:


   .. py:method:: tenor(tag_name)
      :staticmethod:


   .. py:method:: giphy(tag_name)
      :staticmethod:


   .. py:method:: tenor(tag_name)
      :staticmethod:
      :async:


   .. py:method:: giphy(tag_name)
      :staticmethod:
      :async:



.. py:class:: LinksAndVars

   Bases: :py:obj:`enum.Enum`

   Generic enumeration.

   Derive from this class to define new enumerations.

   .. py:attribute:: website
      :annotation: = https://minato-namikaze.readthedocs.io/en/latest

      

   .. py:attribute:: github
      :annotation: = https://github.com/The-4th-Hokage/yondaime-hokage

      

   .. py:attribute:: github_branch
      :annotation: = master

      

   .. py:attribute:: bad_links
      :annotation: = https://raw.githubusercontent.com/The-4th-Hokage/bad-domains-list/master/bad-domains.txt

      

   .. py:attribute:: listing
      :annotation: = https://raw.githubusercontent.com/The-4th-Hokage/listing/master/listing.json

      

   .. py:attribute:: character_data
      :annotation: = https://raw.githubusercontent.com/The-4th-Hokage/naruto-card-game-images/master/img_data.json

      

   .. py:attribute:: statuspage_link
      :annotation: = https://minatonamikaze.statuspage.io

      

   .. py:attribute:: mal_logo
      :annotation: = https://cdn.myanimelist.net/images/event/15th_anniversary/top_page/item7.png

      

   .. py:attribute:: giveaway_image
      :annotation: = https://i.imgur.com/efLKnlh.png

      

   .. py:attribute:: version
      

      

   .. py:attribute:: invite_code
      :annotation: = vfXHwS3nmQ

      

   .. py:attribute:: timeout
      :annotation: = 3.0

      

   .. py:attribute:: owner_ids
      :annotation: = [887549958931247137, 837223478934896670, 747729781369602049]

      


.. py:class:: VotingMenu(bot)

   Bases: :py:obj:`discord.ext.menus.Menu`

   An interface that allows handling menus by using reactions as buttons.

   Buttons should be marked with the :func:`button` decorator. Please note that
   this expects the methods to have a single parameter, the ``payload``. This
   ``payload`` is of type :class:`discord.RawReactionActionEvent`.

   .. attribute:: timeout

      The timeout to wait between button inputs.

      :type: :class:`float`

   .. attribute:: delete_message_after

      Whether to delete the message after the menu interaction is done.

      :type: :class:`bool`

   .. attribute:: clear_reactions_after

      Whether to clear reactions after the menu interaction is done.
      Note that :attr:`delete_message_after` takes priority over this attribute.
      If the bot does not have permissions to clear the reactions then it will
      delete the reactions one by one.

      :type: :class:`bool`

   .. attribute:: check_embeds

      Whether to verify embed permissions as well.

      :type: :class:`bool`

   .. attribute:: ctx

      The context that started this pagination session or ``None`` if it hasn't
      been started yet.

      :type: Optional[:class:`commands.Context`]

   .. attribute:: bot

      The bot that is running this pagination session or ``None`` if it hasn't
      been started yet.

      :type: Optional[:class:`commands.Bot`]

   .. attribute:: message

      The message that has been sent for handling the menu. This is the returned
      message of :meth:`send_initial_message`. You can set it in order to avoid
      calling :meth:`send_initial_message`\, if for example you have a pre-existing
      message you want to attach a menu to.

      :type: Optional[:class:`discord.Message`]

   .. py:method:: send_initial_message(self, ctx, channel)
      :async:

      |coro|

      Sends the initial message for the menu session.

      This is internally assigned to the :attr:`message` attribute.

      Subclasses must implement this if they don't set the
      :attr:`message` attribute themselves before starting the
      menu via :meth:`start`.

      :param ctx: The invocation context to use.
      :type ctx: :class:`Context`
      :param channel: The messageable to send the message to.
      :type channel: :class:`discord.abc.Messageable`

      :returns: The message that has been sent.
      :rtype: :class:`discord.Message`


   .. py:method:: on_check_mark(self, payload)
      :async:


   .. py:method:: on_stop(self, payload)
      :async:



.. py:class:: PrivacyPolicy(bot)

   Bases: :py:obj:`discord.ext.menus.Menu`

   An interface that allows handling menus by using reactions as buttons.

   Buttons should be marked with the :func:`button` decorator. Please note that
   this expects the methods to have a single parameter, the ``payload``. This
   ``payload`` is of type :class:`discord.RawReactionActionEvent`.

   .. attribute:: timeout

      The timeout to wait between button inputs.

      :type: :class:`float`

   .. attribute:: delete_message_after

      Whether to delete the message after the menu interaction is done.

      :type: :class:`bool`

   .. attribute:: clear_reactions_after

      Whether to clear reactions after the menu interaction is done.
      Note that :attr:`delete_message_after` takes priority over this attribute.
      If the bot does not have permissions to clear the reactions then it will
      delete the reactions one by one.

      :type: :class:`bool`

   .. attribute:: check_embeds

      Whether to verify embed permissions as well.

      :type: :class:`bool`

   .. attribute:: ctx

      The context that started this pagination session or ``None`` if it hasn't
      been started yet.

      :type: Optional[:class:`commands.Context`]

   .. attribute:: bot

      The bot that is running this pagination session or ``None`` if it hasn't
      been started yet.

      :type: Optional[:class:`commands.Bot`]

   .. attribute:: message

      The message that has been sent for handling the menu. This is the returned
      message of :meth:`send_initial_message`. You can set it in order to avoid
      calling :meth:`send_initial_message`\, if for example you have a pre-existing
      message you want to attach a menu to.

      :type: Optional[:class:`discord.Message`]

   .. py:method:: send_initial_message(self, ctx, channel)
      :async:

      |coro|

      Sends the initial message for the menu session.

      This is internally assigned to the :attr:`message` attribute.

      Subclasses must implement this if they don't set the
      :attr:`message` attribute themselves before starting the
      menu via :meth:`start`.

      :param ctx: The invocation context to use.
      :type ctx: :class:`Context`
      :param channel: The messageable to send the message to.
      :type channel: :class:`discord.abc.Messageable`

      :returns: The message that has been sent.
      :rtype: :class:`discord.Message`


   .. py:method:: on_add(self, payload)
      :async:


   .. py:method:: on_stop(self, payload)
      :async:



.. py:class:: MenuSource(data)

   Bases: :py:obj:`discord.ext.menus.ListPageSource`

   A data source for a sequence of items.

   This page source does not handle any sort of formatting, leaving it up
   to the user. To do so, implement the :meth:`format_page` method.

   .. attribute:: entries

      The sequence of items to paginate.

      :type: Sequence[Any]

   .. attribute:: per_page

      How many elements are in a page.

      :type: :class:`int`

   .. py:method:: format_page(self, menu, data)
      :async:

      |maybecoro|

      An abstract method to format the page.

      This method must return one of the following types.

      If this method returns a ``str`` then it is interpreted as returning
      the ``content`` keyword argument in :meth:`discord.Message.edit`
      and :meth:`discord.abc.Messageable.send`.

      If this method returns a :class:`discord.Embed` then it is interpreted
      as returning the ``embed`` keyword argument in :meth:`discord.Message.edit`
      and :meth:`discord.abc.Messageable.send`.

      If this method returns a ``dict`` then it is interpreted as the
      keyword-arguments that are used in both :meth:`discord.Message.edit`
      and :meth:`discord.abc.Messageable.send`. The two of interest are
      ``embed`` and ``content``.

      :param menu: The menu that wants to format this page.
      :type menu: :class:`Menu`
      :param page: The page returned by :meth:`PageSource.get_page`.
      :type page: Any

      :returns: See above.
      :rtype: Union[:class:`str`, :class:`discord.Embed`, :class:`dict`]



.. py:data:: BASE_DIR
   

   

.. py:data:: dotenv_file
   

   

.. py:function:: token_get(tokenname)


.. py:data:: api_image_store_dir
   

   

.. py:data:: DEFAULT_COMMAND_SELECT_LENGTH
   :annotation: = 25

   

.. py:class:: ShinobiMatch

   Bases: :py:obj:`list`, :py:obj:`enum.Enum`

   Built-in mutable sequence.

   If no argument is given, the constructor creates a new empty list.
   The argument must be an iterable if specified.

   .. py:attribute:: character_side_exclude
      :annotation: = ['anbu', 'iwagakure', 'kumogakure', 'kirigakure', 'otogakure', 'sunagakure', 'akatsuki', 'konohagakure']

      

   .. py:attribute:: name_exclusion
      

      


.. py:class:: ChannelAndMessageId

   Bases: :py:obj:`enum.IntEnum`

   Enum where members are also (and must be) ints

   .. py:attribute:: badges_channel
      :annotation: = 920536143458598930

      

   .. py:attribute:: backup_channel
      :annotation: = 922544732918415390

      

   .. py:attribute:: error_logs_channel
      :annotation: = 920190310942908513

      

   .. py:attribute:: server_id
      :annotation: = 920190307595874304

      

   .. py:attribute:: server_id2
      :annotation: = 920536143244709889

      

   .. py:attribute:: restartlog_channel1
      :annotation: = 920190310942908508

      

   .. py:attribute:: restartlog_channel2
      :annotation: = 920536143458598926

      

   .. py:attribute:: serverlog_channel1
      :annotation: = 920190310942908509

      

   .. py:attribute:: serverlog_channel2
      :annotation: = 920536143458598927

      


.. py:class:: Tokens

   Bases: :py:obj:`enum.Enum`

   Generic enumeration.

   Derive from this class to define new enumerations.

   .. py:attribute:: statcord
      

      

   .. py:attribute:: dagpi
      

      

   .. py:attribute:: chatbot
      

      

   .. py:attribute:: sentry_link
      

      

   .. py:attribute:: tenor
      

      

   .. py:attribute:: giphy
      

      

   .. py:attribute:: token
      

      

   .. py:attribute:: weather
      

      


.. py:class:: LinksAndVars

   Bases: :py:obj:`enum.Enum`

   Generic enumeration.

   Derive from this class to define new enumerations.

   .. py:attribute:: website
      :annotation: = https://minato-namikaze.readthedocs.io/en/latest

      

   .. py:attribute:: github
      :annotation: = https://github.com/The-4th-Hokage/yondaime-hokage

      

   .. py:attribute:: github_branch
      :annotation: = master

      

   .. py:attribute:: bad_links
      :annotation: = https://raw.githubusercontent.com/The-4th-Hokage/bad-domains-list/master/bad-domains.txt

      

   .. py:attribute:: listing
      :annotation: = https://raw.githubusercontent.com/The-4th-Hokage/listing/master/listing.json

      

   .. py:attribute:: character_data
      :annotation: = https://raw.githubusercontent.com/The-4th-Hokage/naruto-card-game-images/master/img_data.json

      

   .. py:attribute:: statuspage_link
      :annotation: = https://minatonamikaze.statuspage.io

      

   .. py:attribute:: mal_logo
      :annotation: = https://cdn.myanimelist.net/images/event/15th_anniversary/top_page/item7.png

      

   .. py:attribute:: giveaway_image
      :annotation: = https://i.imgur.com/efLKnlh.png

      

   .. py:attribute:: version
      

      

   .. py:attribute:: invite_code
      :annotation: = vfXHwS3nmQ

      

   .. py:attribute:: timeout
      :annotation: = 3.0

      

   .. py:attribute:: owner_ids
      :annotation: = [887549958931247137, 837223478934896670, 747729781369602049]

      


.. py:class:: RaidMode

   Bases: :py:obj:`enum.Enum`

   Generic enumeration.

   Derive from this class to define new enumerations.

   .. py:attribute:: off
      :annotation: = 0

      

   .. py:attribute:: on
      :annotation: = 1

      

   .. py:attribute:: strict
      :annotation: = 2

      


.. py:class:: Webhooks

   Bases: :py:obj:`enum.Enum`

   Generic enumeration.

   Derive from this class to define new enumerations.

   .. py:attribute:: logs
      

      

   .. py:attribute:: feedback
      

      


.. py:class:: Database

   Bases: :py:obj:`enum.Enum`

   Generic enumeration.

   Derive from this class to define new enumerations.

   .. py:attribute:: database_category_name
      :annotation: = DATABASE

      

   .. py:attribute:: database_channel_name
      :annotation: = setup vars

      

   .. py:attribute:: antiraid_channel_name
      :annotation: = antiraid

      

   .. py:attribute:: mentionspam_channel_name
      :annotation: = mentionspam

      

   .. py:attribute:: reaction_roles_channel_name
      :annotation: = reaction roles

      

   .. py:attribute:: giveaway_time_channel_name
      :annotation: = giveaway

      

   .. py:attribute:: user_blacklist_channel_name
      :annotation: = user blacklist

      

   .. py:attribute:: server_blacklist_channel_name
      :annotation: = server blacklist

      


.. py:class:: Methods

   Bases: :py:obj:`enum.IntEnum`

   Enum where members are also (and must be) ints

   .. py:attribute:: GET
      :annotation: = 1

      

   .. py:attribute:: POST
      :annotation: = 2

      

   .. py:attribute:: DELETE
      :annotation: = 3

      


.. py:data:: LATTICES
   :annotation: :dict

   

.. py:data:: IMAGES
   :annotation: :dict

   

.. py:data:: UNITS
   :annotation: :dict

   

.. py:data:: minato_gif
   :annotation: = []

   

.. py:data:: among_us
   

   

.. py:data:: url_regex
   

   

.. py:class:: Methods

   Bases: :py:obj:`enum.IntEnum`

   Enum where members are also (and must be) ints

   .. py:attribute:: GET
      :annotation: = 1

      

   .. py:attribute:: POST
      :annotation: = 2

      

   .. py:attribute:: DELETE
      :annotation: = 3

      


.. py:class:: Tokens

   Bases: :py:obj:`enum.Enum`

   Generic enumeration.

   Derive from this class to define new enumerations.

   .. py:attribute:: statcord
      

      

   .. py:attribute:: dagpi
      

      

   .. py:attribute:: chatbot
      

      

   .. py:attribute:: sentry_link
      

      

   .. py:attribute:: tenor
      

      

   .. py:attribute:: giphy
      

      

   .. py:attribute:: token
      

      

   .. py:attribute:: weather
      

      


.. py:function:: token_get(tokenname)


.. py:class:: LinksAndVars

   Bases: :py:obj:`enum.Enum`

   Generic enumeration.

   Derive from this class to define new enumerations.

   .. py:attribute:: website
      :annotation: = https://minato-namikaze.readthedocs.io/en/latest

      

   .. py:attribute:: github
      :annotation: = https://github.com/The-4th-Hokage/yondaime-hokage

      

   .. py:attribute:: github_branch
      :annotation: = master

      

   .. py:attribute:: bad_links
      :annotation: = https://raw.githubusercontent.com/The-4th-Hokage/bad-domains-list/master/bad-domains.txt

      

   .. py:attribute:: listing
      :annotation: = https://raw.githubusercontent.com/The-4th-Hokage/listing/master/listing.json

      

   .. py:attribute:: character_data
      :annotation: = https://raw.githubusercontent.com/The-4th-Hokage/naruto-card-game-images/master/img_data.json

      

   .. py:attribute:: statuspage_link
      :annotation: = https://minatonamikaze.statuspage.io

      

   .. py:attribute:: mal_logo
      :annotation: = https://cdn.myanimelist.net/images/event/15th_anniversary/top_page/item7.png

      

   .. py:attribute:: giveaway_image
      :annotation: = https://i.imgur.com/efLKnlh.png

      

   .. py:attribute:: version
      

      

   .. py:attribute:: invite_code
      :annotation: = vfXHwS3nmQ

      

   .. py:attribute:: timeout
      :annotation: = 3.0

      

   .. py:attribute:: owner_ids
      :annotation: = [887549958931247137, 837223478934896670, 747729781369602049]

      


.. py:data:: log
   

   

.. py:data:: ch
   

   

.. py:data:: formatter
   

   

.. py:data:: FATESLIST_BASE_URI
   :annotation: = https://api.fateslist.xyz/

   

.. py:data:: DISCORD_SERVERVICES_BASE_URI
   :annotation: = https://api.discordservices.net/bot/

   

.. py:function:: post_handler(method, url, header = None, headers = None, data = None, json = None, log_data = False, return_data = True, return_json = False, getrequestobj = False)
   :async:


.. py:function:: ratelimit_handler(req, url, method, headers, data, print_logs = False)
   :async:


.. py:function:: post_commands(bot, print_logs = False)
   :async:


