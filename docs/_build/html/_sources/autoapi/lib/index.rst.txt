:py:mod:`lib`
=============

.. py:module:: lib


Subpackages
-----------
.. toctree::
   :titlesonly:
   :maxdepth: 3

   classes/index.rst
   data/index.rst
   database/index.rst
   functions/index.rst
   mendeleev/index.rst
   util/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   lib.Badge
   lib.BaseWriter
   lib.SVGWriter
   lib.Barcode
   lib.Code39
   lib.ExpiringCache
   lib.LinksAndVars
   lib.ShinobiMatch
   lib.TimeConverter
   lib.Arguments
   lib.MemberID
   lib.BannedMember
   lib.ActionReason
   lib.AntiRaidConfig
   lib.MentionSpamConfig
   lib.GiveawayConfig
   lib.CooldownByContent
   lib.SpamChecker
   lib.Characters
   lib.AkinatorButtons
   lib.Akinator
   lib.ConnectFourButton
   lib.Quit
   lib.ConnectFour
   lib.Hangman
   lib.TicTacToeButton
   lib.TicTacToe
   lib.TypeRacer
   lib.CharacterSelect
   lib.ShinobiMatchCharacterSelection
   lib.MatchHandlerViewButton
   lib.MatchHandlerView
   lib.GroupHelpPageSource
   lib.HelpSelectMenu
   lib.FrontPageSource
   lib.HelpMenu
   lib.PaginatedHelpCommand
   lib.plural
   lib.ShortTime
   lib.HumanTime
   lib.Time
   lib.FutureTime
   lib.UserFriendlyTime
   lib.ReactionRolesButton
   lib.ReactionPersistentView
   lib.ChannelAndMessageId
   lib.BackupDatabse
   lib.Badges
   lib.ExpiringCache
   lib.Strategy
   lib.plural
   lib.ChannelAndMessageId
   lib.LinksAndVars
   lib.MemberID
   lib.ChannelAndMessageId
   lib.Tokens
   lib.ConfirmationView
   lib.Context
   lib.LinksAndVars
   lib.VotingMenu
   lib.PrivacyPolicy
   lib.MenuSource
   lib.ShinobiMatch
   lib.RaidMode
   lib.Webhooks
   lib.Database
   lib.Methods



Functions
~~~~~~~~~

.. autoapisummary::

   lib.mm2px
   lib.pt2mm
   lib._set_attributes
   lib.create_svg_object
   lib.check_code
   lib.get_barcode
   lib.generate
   lib.can_execute_action
   lib.safe_reason_append
   lib.chunks
   lib.format_dt
   lib.human_join
   lib.human_timedelta
   lib.format_relative
   lib._wrap_and_store_coroutine
   lib._wrap_new_coroutine
   lib.cache
   lib.meek_api
   lib.return_matching_emoji
   lib.insert_returns
   lib.copy_context_with
   lib.check_permissions
   lib.has_permissions
   lib.check_guild_permissions
   lib.has_guild_permissions
   lib.is_mod
   lib.is_admin
   lib.mod_or_permissions
   lib.admin_or_permissions
   lib.is_in_guilds
   lib.serverinfo
   lib.userinfo
   lib.check_if_user_joined_a_voice
   lib.check_if_user_joined_a_stage
   lib.get_welcome_channel
   lib.human_join
   lib.secure_delete
   lib.format_dt
   lib.filter_invites
   lib.convert
   lib.humanize_attachments
   lib.format_character_name
   lib.detect_bad_domains
   lib.token_get
   lib.post_handler
   lib.ratelimit_handler
   lib.post_commands



Attributes
~~~~~~~~~~

.. autoapisummary::

   lib.BASE_DIR
   lib._strbase
   lib.SIZE
   lib.COMMENT
   lib.PATH
   lib.MIN_SIZE
   lib.MIN_QUIET_ZONE
   lib.REF
   lib.B
   lib.E
   lib.CODES
   lib.EDGE
   lib.MIDDLE
   lib.MAP
   lib.ImageWriter
   lib.time_regex
   lib.time_dict
   lib.YES
   lib.NO
   lib.IDK
   lib.P
   lib.PN
   lib.STOP
   lib.RED
   lib.BLUE
   lib.BLANK
   lib.stages
   lib.DEFAULT_COMMAND_SELECT_LENGTH
   lib.units
   lib.letters
   lib.r_letters
   lib.contractions
   lib.r_contractions
   lib.punctuation
   lib.r_punctuation
   lib.numbers
   lib.r_numbers
   lib.dna
   lib.imageslist
   lib.url_regex
   lib.INVITE_URL_RE
   lib.BASE_DIR
   lib.dotenv_file
   lib.api_image_store_dir
   lib.DEFAULT_COMMAND_SELECT_LENGTH
   lib.LATTICES
   lib.IMAGES
   lib.UNITS
   lib.minato_gif
   lib.among_us
   lib.url_regex
   lib.log
   lib.ch
   lib.formatter
   lib.FATESLIST_BASE_URI
   lib.DISCORD_SERVERVICES_BASE_URI


.. py:class:: Badge(badge_name, code, image = None, watermark = None, file_name = None, is_inverted = False)

   A class to handle all the badge commands


   .. py:method:: to_json(self)

      Converts the class to :class:`json`

      :return: Data in the json format
      :rtype: dict


   .. py:method:: from_json(cls, data)
      :classmethod:
      :async:

      generates badge from `json` or :class:`dict`

      :param data: The data in :class:`dict` form
      :type data: dict
      :return: The :class:`~Badge` with the data provided
      :rtype: Badge



.. py:data:: BASE_DIR
   

   

.. py:data:: _strbase
   

   

.. py:function:: mm2px(mm, dpi = 300)

   mm to px converter

   :param mm: mm units
   :type mm: int
   :param dpi: default pixel unit, defaults to 300
   :type dpi: int, optional
   :return: mm converter to pixel
   :rtype: int


.. py:function:: pt2mm(pt)

   Point to mm converter

   :param pt: point
   :type pt: int
   :return: point converted to mm
   :rtype: int


.. py:function:: _set_attributes(element, **attributes)

   It sets attributes to your element

   :param element: The element you want to set your attributes
   :type element: Generic


.. py:function:: create_svg_object()

   Creates a blank svg object

   :return: The blank svg document
   :rtype: DocumentType


.. py:data:: SIZE
   :annotation: = {0:.3f}mm

   

.. py:data:: COMMENT
   

   

.. py:data:: PATH
   

   

.. py:data:: MIN_SIZE
   :annotation: = 0.2

   

.. py:data:: MIN_QUIET_ZONE
   :annotation: = 2.54

   

.. py:data:: REF
   

   

.. py:data:: B
   :annotation: = 1

   

.. py:data:: E
   :annotation: = 0

   

.. py:data:: CODES
   :annotation: = ['101000111011101', '111010001010111', '101110001010111', '111011100010101', '101000111010111',...

   

.. py:data:: EDGE
   :annotation: = 100010111011101

   

.. py:data:: MIDDLE
   :annotation: = 0

   

.. py:data:: MAP
   

   

.. py:exception:: BarcodeError(msg)

   Bases: :py:obj:`Exception`

   Base :class:`Exception` class for the `barcode` module


   .. py:method:: __str__(self)

      Return str(self).



.. py:exception:: IllegalCharacterError(msg)

   Bases: :py:obj:`BarcodeError`

   Raised when a barcode-string contains illegal characters.


.. py:exception:: BarcodeNotFoundError(msg)

   Bases: :py:obj:`BarcodeError`

   Raised when an unknown barcode is requested.


.. py:exception:: NumberOfDigitsError(msg)

   Bases: :py:obj:`BarcodeError`

   Raised when the number of digits do not match.


.. py:exception:: WrongCountryCodeError(msg)

   Bases: :py:obj:`BarcodeError`

   Raised when a JAN (Japan Article Number) don't starts with 450-459
   or 490-499.


.. py:class:: BaseWriter(initialize=None, paint_module=None, paint_text=None, finish=None)

   Baseclass for all writers.
   Initializes the basic writer options. Childclasses can add more
   attributes and can set them directly or using
   `self.set_options(option=value)`.
   :parameters:
       initialize : Function
           Callback for initializing the inheriting writer.
           Is called: `callback_initialize(raw_code)`
       paint_module : Function
           Callback for painting one barcode module.
           Is called: `callback_paint_module(xpos, ypos, width, color)`
       paint_text : Function
           Callback for painting the text under the barcode.
           Is called: `callback_paint_text(xpos, ypos)` using `self.text`
           as text.
       finish : Function
           Callback for doing something with the completely rendered
           output.
           Is called: `return callback_finish()` and must return the
           rendered output.

   .. py:method:: calculate_size(self, modules_per_line, number_of_lines, dpi=300)

      Calculates the size of the barcode in pixel.
      :parameters:
          modules_per_line : Integer
              Number of modules in one line.
          number_of_lines : Integer
              Number of lines of the barcode.
          dpi : Integer
              DPI to calculate.
      :returns: Width and height of the barcode in pixel.
      :rtype: Tuple


   .. py:method:: save(self, filename, output)
      :abstractmethod:

      Saves the rendered output to `filename`.
      :parameters:
          filename : String
              Filename without extension.
          output : String
              The rendered output.
      :returns: The full filename with extension.
      :rtype: String


   .. py:method:: register_callback(self, action, callback)

      Register one of the three callbacks if not given at instance
      creation.
      :parameters:
          action : String
              One of 'initialize', 'paint_module', 'paint_text', 'finish'.
          callback : Function
              The callback function for the given action.


   .. py:method:: set_options(self, options)

      Sets the given options as instance attributes (only
      if they are known).
      :parameters:
          options : Dict
              All known instance attributes and more if the childclass
              has defined them before this call.
      :rtype: None


   .. py:method:: render(self, code)

      Renders the barcode to whatever the inheriting writer provides,
      using the registered callbacks.
      :parameters:
          code : List
              List of strings matching the writer spec
              (only contain 0 or 1).



.. py:class:: SVGWriter

   Bases: :py:obj:`BaseWriter`

   SVG Write object to write `svg` files


   .. py:method:: _init(self, code)

      To initialize some extra attributes

      :param code: An Iterator
      :type code: Union[Iterable, Sequence, Iterator]


   .. py:method:: _create_module(self, xpos, ypos, width, color)

      Creates a module

      :param xpos: The x position
      :type xpos: int
      :param ypos: The y position
      :type ypos: int
      :param width: Width of the module
      :type width: int
      :param color: The colour to be there
      :type color: Union[int, str]


   .. py:method:: _create_text(self, xpos, ypos)

      Creates text in the svg file

      :param xpos: x position
      :type xpos: int
      :param ypos: y position
      :type ypos: int


   .. py:method:: _finish(self)

      Finishes the creating of svg document

      :return: The xml document
      :rtype: Union[str,bytes, DocumentType]


   .. py:method:: save(self, filename, output)

      Saves the SVG document

      :param filename: The filename
      :type filename: str
      :param output:The string or bytes data
      :type output: Union[str, bytes]
      :return: The filename
      :rtype: str



.. py:data:: ImageWriter
   

   

.. py:class:: Barcode

   .. py:attribute:: name
      :annotation: = 

      

   .. py:attribute:: raw
      

      

   .. py:attribute:: digits
      :annotation: = 0

      

   .. py:attribute:: default_writer
      

      

   .. py:attribute:: default_writer_options
      

      

   .. py:method:: to_ascii(self)

      Barcode ASCII conversion

      :return: The acii code
      :rtype: str


   .. py:method:: __repr__(self)

      Return repr(self).


   .. py:method:: build(self)
      :abstractmethod:


   .. py:method:: get_fullcode(self)
      :abstractmethod:

      Returns the full code, encoded in the barcode.
      :returns: Full human readable code.
      :rtype: String


   .. py:method:: save(self, filename, options = None)

      Renders the barcode and saves it in `filename`.
      :parameters:
          filename : String
              Filename to save the barcode in (without filename
              extension).
          options : Optional[Dict]
              The same as in `self.render`.
      :returns: The full filename with extension.
      :rtype: String


   .. py:method:: write(self, fp, options = None)

      Renders the barcode and writes it to the file like object
      `fp`.
      :parameters:
          fp : File like object
              Object to write the raw data in.
          options : Optional[dict]
              The same as in `self.render`.


   .. py:method:: render(self, writer_options = None)

      Renders the barcode using `self.writer`.
      :parameters:
          writer_options : Optional[dict]
              Options for `self.writer`, see writer docs for details.
      :returns: Output of the writers render method.



.. py:function:: check_code(code, name, allowed)

   Checks the barcode for the illegal characters

   :param code: The barcode
   :type code: Union[Iterable, Sequence]
   :param name: Name
   :type name: str
   :param allowed: Allowed characters
   :type allowed: Union[Iterable, Sequence]
   :raises IllegalCharacterError: when illegal character is found


.. py:class:: Code39(code, writer=None, add_checksum=True)

   Bases: :py:obj:`Barcode`

   Initializes a new Code39 instance.
   :parameters:
       code : String
           Code 39 string without \* and checksum (added automatically if
           `add_checksum` is True).
       writer : barcode.writer Instance
           The writer to render the barcode (default: SVGWriter).
       add_checksum : Boolean
           Add the checksum to code or not (default: True).

   .. py:attribute:: name
      :annotation: = Code 39

      

   .. py:attribute:: __str__
      

      

   .. py:method:: __unicode__(self)


   .. py:method:: get_fullcode(self)

      Returns the full code

      :return: See above
      :rtype: str


   .. py:method:: calculate_checksum(self)

      Calculates the checksum

      :return: Checksum
      :rtype: Any


   .. py:method:: build(self)

      Builds the code

      :return: The whole code
      :rtype: list


   .. py:method:: render(self, writer_options)

      Renders the code

      :param writer_options: The options to be there in the code
      :type writer_options: dict
      :return: The rendered code
      :rtype: Callable



.. py:function:: get_barcode(name, code = None, writer = None)

   Gets the Barcode

   :param name: Name of the bar code
   :type name: str
   :param code: The code, defaults to None
   :type code: Optional[Any], optional
   :param writer: The writer object or file pointer, defaults to None
   :type writer: Optional[Union[IO,Any]], optional
   :raises BarcodeNotFoundError: When the barcode is not found
   :return: The barcode that was requested
   :rtype: Union[Code39, Any]


.. py:function:: generate(name, code = None, writer = None, writer_options = None, output=None)

   Generates the barcode

   :param name: Name of the barcode
   :type name: str
   :param code: The code, defaults to None
   :type code: Optional[Any], optional
   :param writer:The writer object or the file pointer, defaults to None
   :type writer: Optional[Union[IO,Any]], optional
   :param writer_options: The extra options to be encode with the barcode, defaults to None
   :type writer_options: Optional[Dict], optional


.. py:class:: ExpiringCache(seconds)

   Bases: :py:obj:`dict`

   dict() -> new empty dictionary
   dict(mapping) -> new dictionary initialized from a mapping object's
       (key, value) pairs
   dict(iterable) -> new dictionary initialized as if via:
       d = {}
       for k, v in iterable:
           d[k] = v
   dict(**kwargs) -> new dictionary initialized with the name=value pairs
       in the keyword argument list.  For example:  dict(one=1, two=2)

   .. py:method:: __verify_cache_integrity(self)


   .. py:method:: __contains__(self, key)

      True if the dictionary has the specified key, else False.


   .. py:method:: __getitem__(self, key)

      x.__getitem__(y) <==> x[y]


   .. py:method:: __setitem__(self, key, value)

      Set self[key] to value.



.. py:class:: LinksAndVars

   Bases: :py:obj:`enum.Enum`

   Generic enumeration.

   Derive from this class to define new enumerations.

   .. py:attribute:: website
      :annotation: = https://minato-namikaze.readthedocs.io/en/latest

      

   .. py:attribute:: github
      :annotation: = https://github.com/The-4th-Hokage/yondaime-hokage

      

   .. py:attribute:: github_branch
      :annotation: = master

      

   .. py:attribute:: bad_links
      :annotation: = https://raw.githubusercontent.com/The-4th-Hokage/bad-domains-list/master/bad-domains.txt

      

   .. py:attribute:: listing
      :annotation: = https://raw.githubusercontent.com/The-4th-Hokage/listing/master/listing.json

      

   .. py:attribute:: character_data
      :annotation: = https://raw.githubusercontent.com/The-4th-Hokage/naruto-card-game-images/master/img_data.json

      

   .. py:attribute:: statuspage_link
      :annotation: = https://minatonamikaze.statuspage.io

      

   .. py:attribute:: mal_logo
      :annotation: = https://cdn.myanimelist.net/images/event/15th_anniversary/top_page/item7.png

      

   .. py:attribute:: giveaway_image
      :annotation: = https://i.imgur.com/efLKnlh.png

      

   .. py:attribute:: version
      

      

   .. py:attribute:: invite_code
      :annotation: = vfXHwS3nmQ

      

   .. py:attribute:: timeout
      :annotation: = 3.0

      

   .. py:attribute:: owner_ids
      :annotation: = [887549958931247137, 837223478934896670, 747729781369602049]

      


.. py:class:: ShinobiMatch

   Bases: :py:obj:`list`, :py:obj:`enum.Enum`

   Built-in mutable sequence.

   If no argument is given, the constructor creates a new empty list.
   The argument must be an iterable if specified.

   .. py:attribute:: character_side_exclude
      :annotation: = ['anbu', 'iwagakure', 'kumogakure', 'kirigakure', 'otogakure', 'sunagakure', 'akatsuki', 'konohagakure']

      

   .. py:attribute:: name_exclusion
      

      


.. py:data:: time_regex
   

   

.. py:data:: time_dict
   

   

.. py:class:: TimeConverter

   Bases: :py:obj:`discord.ext.commands.Converter`

   The base class of custom converters that require the :class:`.Context`
   to be passed to be useful.

   This allows you to implement converters that function similar to the
   special cased ``discord`` classes.

   Classes that derive from this should override the :meth:`~.Converter.convert`
   method to do its conversion logic. This method must be a :ref:`coroutine <coroutine>`.

   .. py:method:: convert(self, ctx, argument)
      :async:

      |coro|

      The method to override to do conversion logic.

      If an error is found while converting, it is recommended to
      raise a :exc:`.CommandError` derived exception as it will
      properly propagate to the error handlers.

      :param ctx: The invocation context that the argument is being used in.
      :type ctx: :class:`.Context`
      :param argument: The argument that is being converted.
      :type argument: :class:`str`

      :raises CommandError: A generic exception occurred when converting the argument.
      :raises BadArgument: The converter failed to convert the argument.



.. py:class:: Arguments(prog=None, usage=None, description=None, epilog=None, parents=[], formatter_class=HelpFormatter, prefix_chars='-', fromfile_prefix_chars=None, argument_default=None, conflict_handler='error', add_help=True, allow_abbrev=True)

   Bases: :py:obj:`argparse.ArgumentParser`

   Object for parsing command line strings into Python objects.

   :keyword - prog -- The name of the program (default: sys.argv[0])
   :keyword - usage -- A usage message (default: auto-generated from arguments)
   :keyword - description -- A description of what the program does:
   :keyword - epilog -- Text following the argument descriptions:
   :keyword - parents -- Parsers whose arguments should be copied into this one:
   :keyword - formatter_class -- HelpFormatter class for printing help messages:
   :keyword - prefix_chars -- Characters that prefix optional arguments:
   :keyword - fromfile_prefix_chars -- Characters that prefix files containing: additional arguments
   :keyword - argument_default -- The default value for all arguments:
   :keyword - conflict_handler -- String indicating how to handle conflicts:
   :keyword - add_help -- Add a -h/-help option:
   :keyword - allow_abbrev -- Allow long options to be abbreviated unambiguously:

   .. py:method:: error(self, message)

      error(message: string)

      Prints a usage message incorporating the message to stderr and
      exits.

      If you override this in a subclass, it should not return -- it
      should either exit or raise an exception.



.. py:function:: can_execute_action(ctx, user, target)


.. py:class:: MemberID

   Bases: :py:obj:`discord.ext.commands.Converter`

   The base class of custom converters that require the :class:`.Context`
   to be passed to be useful.

   This allows you to implement converters that function similar to the
   special cased ``discord`` classes.

   Classes that derive from this should override the :meth:`~.Converter.convert`
   method to do its conversion logic. This method must be a :ref:`coroutine <coroutine>`.

   .. py:method:: convert(self, ctx, argument)
      :async:

      |coro|

      The method to override to do conversion logic.

      If an error is found while converting, it is recommended to
      raise a :exc:`.CommandError` derived exception as it will
      properly propagate to the error handlers.

      :param ctx: The invocation context that the argument is being used in.
      :type ctx: :class:`.Context`
      :param argument: The argument that is being converted.
      :type argument: :class:`str`

      :raises CommandError: A generic exception occurred when converting the argument.
      :raises BadArgument: The converter failed to convert the argument.



.. py:class:: BannedMember

   Bases: :py:obj:`discord.ext.commands.Converter`

   The base class of custom converters that require the :class:`.Context`
   to be passed to be useful.

   This allows you to implement converters that function similar to the
   special cased ``discord`` classes.

   Classes that derive from this should override the :meth:`~.Converter.convert`
   method to do its conversion logic. This method must be a :ref:`coroutine <coroutine>`.

   .. py:method:: convert(self, ctx, argument)
      :async:

      |coro|

      The method to override to do conversion logic.

      If an error is found while converting, it is recommended to
      raise a :exc:`.CommandError` derived exception as it will
      properly propagate to the error handlers.

      :param ctx: The invocation context that the argument is being used in.
      :type ctx: :class:`.Context`
      :param argument: The argument that is being converted.
      :type argument: :class:`str`

      :raises CommandError: A generic exception occurred when converting the argument.
      :raises BadArgument: The converter failed to convert the argument.



.. py:class:: ActionReason

   Bases: :py:obj:`discord.ext.commands.Converter`

   The base class of custom converters that require the :class:`.Context`
   to be passed to be useful.

   This allows you to implement converters that function similar to the
   special cased ``discord`` classes.

   Classes that derive from this should override the :meth:`~.Converter.convert`
   method to do its conversion logic. This method must be a :ref:`coroutine <coroutine>`.

   .. py:method:: convert(self, ctx, argument)
      :async:

      |coro|

      The method to override to do conversion logic.

      If an error is found while converting, it is recommended to
      raise a :exc:`.CommandError` derived exception as it will
      properly propagate to the error handlers.

      :param ctx: The invocation context that the argument is being used in.
      :type ctx: :class:`.Context`
      :param argument: The argument that is being converted.
      :type argument: :class:`str`

      :raises CommandError: A generic exception occurred when converting the argument.
      :raises BadArgument: The converter failed to convert the argument.



.. py:function:: safe_reason_append(base, to_append)


.. py:class:: AntiRaidConfig

   .. py:attribute:: __slots__
      :annotation: = ['raid_mode', 'id', 'bot', 'broadcast_channel_id']

      

   .. py:method:: from_record(cls, record, bot)
      :classmethod:
      :async:


   .. py:method:: broadcast_channel(self)
      :property:



.. py:class:: MentionSpamConfig

   .. py:attribute:: __slots__
      :annotation: = ['id', 'bot', 'mention_count', 'safe_mention_channel_ids']

      

   .. py:method:: from_record(cls, record, bot)
      :classmethod:
      :async:



.. py:class:: GiveawayConfig

   .. py:attribute:: __slots__
      :annotation: = ['id', 'host', 'channel', 'message', 'embed', 'role_required', 'tasks', 'prize', 'end_time',...

      

   .. py:method:: from_record(cls, record, bot)
      :classmethod:
      :async:



.. py:class:: CooldownByContent(original, type)

   Bases: :py:obj:`discord.ext.commands.CooldownMapping`

   .. py:method:: _bucket_key(message)



.. py:class:: SpamChecker

   This spam checker does a few things.
   1) It checks if a user has spammed more than 10 times in 12 seconds
   2) It checks if the content has been spammed 15 times in 17 seconds.
   3) It checks if new users have spammed 30 times in 35 seconds.
   4) It checks if "fast joiners" have spammed 10 times in 12 seconds.
   The second case is meant to catch alternating spam bots while the first one
   just catches regular singular spam bots.
   From experience these values aren't reached unless someone is actively spamming.

   .. py:method:: is_new(member)
      :staticmethod:


   .. py:method:: is_spamming(self, message)


   .. py:method:: is_fast_join(self, member)



.. py:class:: Characters(**kwargs)

   The characters model class

   .. py:attribute:: __slots__
      :annotation: = ['id', 'name', 'images', 'emoji', 'category', 'kwargs']

      

   .. py:method:: hitpoint(self)
      :property:


   .. py:method:: regainpoint(self)
      :property:


   .. py:method:: healpoint(self)
      :property:

      These are in percentages


   .. py:method:: specialpoint(self)
      :property:

      These are in percentages


   .. py:method:: from_record(cls, record, ctx, name)
      :classmethod:


   .. py:method:: return_emoji(url, category, ctx)
      :staticmethod:



.. py:data:: YES
   

   

.. py:data:: NO
   

   

.. py:data:: IDK
   

   

.. py:data:: P
   

   

.. py:data:: PN
   

   

.. py:data:: STOP
   

   

.. py:class:: AkinatorButtons(emoji)

   Bases: :py:obj:`discord.ui.Button`\ [\ :py:obj:`Akinator`\ ]

   Represents a UI button.

   .. versionadded:: 2.0

   :param style: The style of the button.
   :type style: :class:`discord.ButtonStyle`
   :param custom_id: The ID of the button that gets received during an interaction.
                     If this button is for a URL, it does not have a custom ID.
   :type custom_id: Optional[:class:`str`]
   :param url: The URL this button sends you to.
   :type url: Optional[:class:`str`]
   :param disabled: Whether the button is disabled or not.
   :type disabled: :class:`bool`
   :param label: The label of the button, if any.
   :type label: Optional[:class:`str`]
   :param emoji: The emoji of the button, if available.
   :type emoji: Optional[Union[:class:`.PartialEmoji`, :class:`.Emoji`, :class:`str`]]
   :param row: The relative row this button belongs to. A Discord component can only have 5
               rows. By default, items are arranged automatically into those 5 rows. If you'd
               like to control the relative positioning of the row then passing an index is advised.
               For example, row=1 will show up before row=2. Defaults to ``None``, which is automatic
               ordering. The row number must be between 0 and 4 (i.e. zero indexed).
   :type row: Optional[:class:`int`]

   .. py:method:: callback(self, interaction)
      :async:

      |coro|

      The callback associated with this UI item.

      This can be overridden by subclasses.

      :param interaction: The interaction that triggered this UI item.
      :type interaction: :class:`.Interaction`



.. py:class:: Akinator

   Bases: :py:obj:`discord.ui.View`

   Represents a UI view.

   This object must be inherited to create a UI within Discord.

   .. versionadded:: 2.0

   :param timeout: Timeout in seconds from last interaction with the UI before no longer accepting input.
                   If ``None`` then there is no timeout.
   :type timeout: Optional[:class:`float`]

   .. py:attribute:: children
      :annotation: :List[AkinatorButtons]

      

   .. py:method:: build_bar(self)


   .. py:method:: build_embed(self)
      :async:


   .. py:method:: win(self)
      :async:


   .. py:method:: start(self)
      :async:


   .. py:method:: on_timeout(self)
      :async:

      |coro|

      A callback that is called when a view's timeout elapses without being explicitly stopped.



.. py:data:: RED
   :annotation: = 🔴

   

.. py:data:: BLUE
   :annotation: = 🔵

   

.. py:data:: BLANK
   :annotation: = ⬛

   

.. py:class:: ConnectFourButton(y, emoji)

   Bases: :py:obj:`discord.ui.Button`\ [\ :py:obj:`ConnectFour`\ ]

   Represents a UI button.

   .. versionadded:: 2.0

   :param style: The style of the button.
   :type style: :class:`discord.ButtonStyle`
   :param custom_id: The ID of the button that gets received during an interaction.
                     If this button is for a URL, it does not have a custom ID.
   :type custom_id: Optional[:class:`str`]
   :param url: The URL this button sends you to.
   :type url: Optional[:class:`str`]
   :param disabled: Whether the button is disabled or not.
   :type disabled: :class:`bool`
   :param label: The label of the button, if any.
   :type label: Optional[:class:`str`]
   :param emoji: The emoji of the button, if available.
   :type emoji: Optional[Union[:class:`.PartialEmoji`, :class:`.Emoji`, :class:`str`]]
   :param row: The relative row this button belongs to. A Discord component can only have 5
               rows. By default, items are arranged automatically into those 5 rows. If you'd
               like to control the relative positioning of the row then passing an index is advised.
               For example, row=1 will show up before row=2. Defaults to ``None``, which is automatic
               ordering. The row number must be between 0 and 4 (i.e. zero indexed).
   :type row: Optional[:class:`int`]

   .. py:method:: callback(self, interaction)
      :async:

      |coro|

      The callback associated with this UI item.

      This can be overridden by subclasses.

      :param interaction: The interaction that triggered this UI item.
      :type interaction: :class:`.Interaction`



.. py:class:: Quit

   Bases: :py:obj:`discord.ui.Button`\ [\ :py:obj:`ConnectFour`\ ]

   Represents a UI button.

   .. versionadded:: 2.0

   :param style: The style of the button.
   :type style: :class:`discord.ButtonStyle`
   :param custom_id: The ID of the button that gets received during an interaction.
                     If this button is for a URL, it does not have a custom ID.
   :type custom_id: Optional[:class:`str`]
   :param url: The URL this button sends you to.
   :type url: Optional[:class:`str`]
   :param disabled: Whether the button is disabled or not.
   :type disabled: :class:`bool`
   :param label: The label of the button, if any.
   :type label: Optional[:class:`str`]
   :param emoji: The emoji of the button, if available.
   :type emoji: Optional[Union[:class:`.PartialEmoji`, :class:`.Emoji`, :class:`str`]]
   :param row: The relative row this button belongs to. A Discord component can only have 5
               rows. By default, items are arranged automatically into those 5 rows. If you'd
               like to control the relative positioning of the row then passing an index is advised.
               For example, row=1 will show up before row=2. Defaults to ``None``, which is automatic
               ordering. The row number must be between 0 and 4 (i.e. zero indexed).
   :type row: Optional[:class:`int`]

   .. py:method:: callback(self, interaction)
      :async:

      |coro|

      The callback associated with this UI item.

      This can be overridden by subclasses.

      :param interaction: The interaction that triggered this UI item.
      :type interaction: :class:`.Interaction`



.. py:class:: ConnectFour(*, red, blue, auto = False)

   Bases: :py:obj:`discord.ui.View`

   Represents a UI view.

   This object must be inherited to create a UI within Discord.

   .. versionadded:: 2.0

   :param timeout: Timeout in seconds from last interaction with the UI before no longer accepting input.
                   If ``None`` then there is no timeout.
   :type timeout: Optional[:class:`float`]

   .. py:attribute:: children
      :annotation: :List[ConnectFourButton]

      

   .. py:method:: BoardString(self)


   .. py:method:: make_embed(self)


   .. py:method:: PlacePiece(self, emoji, user)


   .. py:method:: GameOver(self)


   .. py:method:: interaction_check(self, interaction)
      :async:

      |coro|

      A callback that is called when an interaction happens within the view
      that checks whether the view should process item callbacks for the interaction.

      This is useful to override if, for example, you want to ensure that the
      interaction author is a given user.

      The default implementation of this returns ``True``.

      .. note::

          If an exception occurs within the body then the check
          is considered a failure and :meth:`on_error` is called.

      :param interaction: The interaction that occurred.
      :type interaction: :class:`~discord.Interaction`

      :returns: Whether the view children's callbacks should be called.
      :rtype: :class:`bool`


   .. py:method:: on_timeout(self)
      :async:

      |coro|

      A callback that is called when a view's timeout elapses without being explicitly stopped.



.. py:data:: stages
   :annotation: = ['\n            _________\t\n            |/      |\t\n            |      😵\t\n            |     ...

   

.. py:class:: Hangman

   .. py:method:: MakeGuess(self, guess)
      :async:


   .. py:method:: CheckWin(self)
      :async:


   .. py:method:: start(self, ctx, *, delete_after_guess = False, color = 3092790, **kwargs)
      :async:



.. py:class:: TicTacToeButton(x, y)

   Bases: :py:obj:`discord.ui.Button`\ [\ :py:obj:`TicTacToe`\ ]

   Represents a UI button.

   .. versionadded:: 2.0

   :param style: The style of the button.
   :type style: :class:`discord.ButtonStyle`
   :param custom_id: The ID of the button that gets received during an interaction.
                     If this button is for a URL, it does not have a custom ID.
   :type custom_id: Optional[:class:`str`]
   :param url: The URL this button sends you to.
   :type url: Optional[:class:`str`]
   :param disabled: Whether the button is disabled or not.
   :type disabled: :class:`bool`
   :param label: The label of the button, if any.
   :type label: Optional[:class:`str`]
   :param emoji: The emoji of the button, if available.
   :type emoji: Optional[Union[:class:`.PartialEmoji`, :class:`.Emoji`, :class:`str`]]
   :param row: The relative row this button belongs to. A Discord component can only have 5
               rows. By default, items are arranged automatically into those 5 rows. If you'd
               like to control the relative positioning of the row then passing an index is advised.
               For example, row=1 will show up before row=2. Defaults to ``None``, which is automatic
               ordering. The row number must be between 0 and 4 (i.e. zero indexed).
   :type row: Optional[:class:`int`]

   .. py:method:: callback(self, interaction)
      :async:

      |coro|

      The callback associated with this UI item.

      This can be overridden by subclasses.

      :param interaction: The interaction that triggered this UI item.
      :type interaction: :class:`.Interaction`



.. py:class:: TicTacToe(player1, player2, auto = False)

   Bases: :py:obj:`discord.ui.View`

   Represents a UI view.

   This object must be inherited to create a UI within Discord.

   .. versionadded:: 2.0

   :param timeout: Timeout in seconds from last interaction with the UI before no longer accepting input.
                   If ``None`` then there is no timeout.
   :type timeout: Optional[:class:`float`]

   .. py:attribute:: children
      :annotation: :List[TicTacToeButton]

      

   .. py:attribute:: Tie
      :annotation: = 2

      

   .. py:attribute:: X
      

      

   .. py:attribute:: O
      :annotation: = 1

      

   .. py:method:: interaction_check(self, interaction)
      :async:

      |coro|

      A callback that is called when an interaction happens within the view
      that checks whether the view should process item callbacks for the interaction.

      This is useful to override if, for example, you want to ensure that the
      interaction author is a given user.

      The default implementation of this returns ``True``.

      .. note::

          If an exception occurs within the body then the check
          is considered a failure and :meth:`on_error` is called.

      :param interaction: The interaction that occurred.
      :type interaction: :class:`~discord.Interaction`

      :returns: Whether the view children's callbacks should be called.
      :rtype: :class:`bool`


   .. py:method:: check_board_winner(self)


   .. py:method:: on_timeout(self)
      :async:

      |coro|

      A callback that is called when a view's timeout elapses without being explicitly stopped.



.. py:class:: TypeRacer

   .. py:attribute:: SENTENCE_URL
      :annotation: = https://api.quotable.io/random

      

   .. py:attribute:: GRAMMAR_WORDS
      :annotation: = ['the', 'of', 'to', 'and', 'a', 'in', 'is', 'it', 'you', 'that', 'he', 'was', 'for', 'on',...

      

   .. py:method:: _tr_img(text, font)
      :staticmethod:


   .. py:method:: wait_for_tr_response(ctx, text, *, timeout, start)
      :staticmethod:
      :async:


   .. py:method:: start(self, ctx, *, embed_title = 'Type the following sentence in the chat now!', embed_color = discord.Color.greyple(), path_to_text_font = 'arial.ttf', timeout = None, mode = 'sentence')
      :async:



.. py:class:: CharacterSelect(characters)

   Bases: :py:obj:`discord.ui.Select`\ [\ :py:obj:`ShinobiMatchCharacterSelection`\ ]

   Represents a UI select menu.

   This is usually represented as a drop down menu.

   In order to get the selected items that the user has chosen, use :attr:`Select.values`.

   .. versionadded:: 2.0

   :param custom_id: The ID of the select menu that gets received during an interaction.
                     If not given then one is generated for you.
   :type custom_id: :class:`str`
   :param placeholder: The placeholder text that is shown if nothing is selected, if any.
   :type placeholder: Optional[:class:`str`]
   :param min_values: The minimum number of items that must be chosen for this select menu.
                      Defaults to 1 and must be between 1 and 25.
   :type min_values: :class:`int`
   :param max_values: The maximum number of items that must be chosen for this select menu.
                      Defaults to 1 and must be between 1 and 25.
   :type max_values: :class:`int`
   :param options: A list of options that can be selected in this menu.
   :type options: List[:class:`discord.SelectOption`]
   :param disabled: Whether the select is disabled or not.
   :type disabled: :class:`bool`
   :param row: The relative row this select menu belongs to. A Discord component can only have 5
               rows. By default, items are arranged automatically into those 5 rows. If you'd
               like to control the relative positioning of the row then passing an index is advised.
               For example, row=1 will show up before row=2. Defaults to ``None``, which is automatic
               ordering. The row number must be between 0 and 4 (i.e. zero indexed).
   :type row: Optional[:class:`int`]

   .. py:method:: __fill_options(self)


   .. py:method:: callback(self, interaction)
      :async:

      |coro|

      The callback associated with this UI item.

      This can be overridden by subclasses.

      :param interaction: The interaction that triggered this UI item.
      :type interaction: :class:`.Interaction`



.. py:class:: ShinobiMatchCharacterSelection(characters_data, ctx, player, message = None)

   Bases: :py:obj:`discord.ui.View`

   Represents a UI view.

   This object must be inherited to create a UI within Discord.

   .. versionadded:: 2.0

   :param timeout: Timeout in seconds from last interaction with the UI before no longer accepting input.
                   If ``None`` then there is no timeout.
   :type timeout: Optional[:class:`float`]

   .. py:attribute:: children
      :annotation: :List[Union[CharacterSelect, discord.Button, discord.ui.Button]]

      

   .. py:method:: get_character_config(self, character_id)


   .. py:method:: select(self, button, interaction)
      :async:


   .. py:method:: cancel(self, button, interaction)
      :async:


   .. py:method:: interaction_check(self, interaction)
      :async:

      |coro|

      A callback that is called when an interaction happens within the view
      that checks whether the view should process item callbacks for the interaction.

      This is useful to override if, for example, you want to ensure that the
      interaction author is a given user.

      The default implementation of this returns ``True``.

      .. note::

          If an exception occurs within the body then the check
          is considered a failure and :meth:`on_error` is called.

      :param interaction: The interaction that occurred.
      :type interaction: :class:`~discord.Interaction`

      :returns: Whether the view children's callbacks should be called.
      :rtype: :class:`bool`


   .. py:method:: on_timeout(self)
      :async:

      |coro|

      A callback that is called when a view's timeout elapses without being explicitly stopped.



.. py:class:: MatchHandlerViewButton(label)

   Bases: :py:obj:`discord.ui.Button`\ [\ :py:obj:`MatchHandlerView`\ ]

   Represents a UI button.

   .. versionadded:: 2.0

   :param style: The style of the button.
   :type style: :class:`discord.ButtonStyle`
   :param custom_id: The ID of the button that gets received during an interaction.
                     If this button is for a URL, it does not have a custom ID.
   :type custom_id: Optional[:class:`str`]
   :param url: The URL this button sends you to.
   :type url: Optional[:class:`str`]
   :param disabled: Whether the button is disabled or not.
   :type disabled: :class:`bool`
   :param label: The label of the button, if any.
   :type label: Optional[:class:`str`]
   :param emoji: The emoji of the button, if available.
   :type emoji: Optional[Union[:class:`.PartialEmoji`, :class:`.Emoji`, :class:`str`]]
   :param row: The relative row this button belongs to. A Discord component can only have 5
               rows. By default, items are arranged automatically into those 5 rows. If you'd
               like to control the relative positioning of the row then passing an index is advised.
               For example, row=1 will show up before row=2. Defaults to ``None``, which is automatic
               ordering. The row number must be between 0 and 4 (i.e. zero indexed).
   :type row: Optional[:class:`int`]

   .. py:method:: callback(self, interaction)
      :async:

      |coro|

      The callback associated with this UI item.

      This can be overridden by subclasses.

      :param interaction: The interaction that triggered this UI item.
      :type interaction: :class:`.Interaction`


   .. py:method:: reduce_health(self, amount, heal = False)
      :async:



.. py:class:: MatchHandlerView(player1, player2, message = None)

   Bases: :py:obj:`discord.ui.View`

   Represents a UI view.

   This object must be inherited to create a UI within Discord.

   .. versionadded:: 2.0

   :param timeout: Timeout in seconds from last interaction with the UI before no longer accepting input.
                   If ``None`` then there is no timeout.
   :type timeout: Optional[:class:`float`]

   .. py:attribute:: children
      :annotation: :List[MatchHandlerViewButton]

      

   .. py:method:: percentage_and_progess_bar(self, current_health)


   .. py:method:: make_embed(self, character = None, author = None, color = None)


   .. py:method:: interaction_check(self, interaction)
      :async:

      |coro|

      A callback that is called when an interaction happens within the view
      that checks whether the view should process item callbacks for the interaction.

      This is useful to override if, for example, you want to ensure that the
      interaction author is a given user.

      The default implementation of this returns ``True``.

      .. note::

          If an exception occurs within the body then the check
          is considered a failure and :meth:`on_error` is called.

      :param interaction: The interaction that occurred.
      :type interaction: :class:`~discord.Interaction`

      :returns: Whether the view children's callbacks should be called.
      :rtype: :class:`bool`


   .. py:method:: on_timeout(self)
      :async:

      |coro|

      A callback that is called when a view's timeout elapses without being explicitly stopped.


   .. py:method:: determine_winer(self, force = False)
      :async:



.. py:data:: DEFAULT_COMMAND_SELECT_LENGTH
   :annotation: = 25

   

.. py:function:: chunks(data, SIZE = DEFAULT_COMMAND_SELECT_LENGTH)


.. py:class:: GroupHelpPageSource(group, commands, *, prefix)

   Bases: :py:obj:`DiscordUtils.paginator.menus.ListPageSource`

   A data source for a sequence of items.

   This page source does not handle any sort of formatting, leaving it up
   to the user. To do so, implement the :meth:`format_page` method.

   .. attribute:: entries

      The sequence of items to paginate.

      :type: Sequence[Any]

   .. attribute:: per_page

      How many elements are in a page.

      :type: :class:`int`

   .. py:method:: format_page(self, menu, commands)
      :async:

      |maybecoro|

      An abstract method to format the page.

      This method must return one of the following types.

      If this method returns a ``str`` then it is interpreted as returning
      the ``content`` keyword argument in :meth:`discord.Message.edit`
      and :meth:`discord.abc.Messageable.send`.

      If this method returns a :class:`discord.Embed` then it is interpreted
      as returning the ``embed`` keyword argument in :meth:`discord.Message.edit`
      and :meth:`discord.abc.Messageable.send`.

      If this method returns a ``dict`` then it is interpreted as the
      keyword-arguments that are used in both :meth:`discord.Message.edit`
      and :meth:`discord.abc.Messageable.send`. The two of interest are
      ``embed`` and ``content``.

      :param menu: The menu that wants to format this page.
      :type menu: :class:`Menu`
      :param page: The page returned by :meth:`PageSource.get_page`.
      :type page: Any

      :returns: See above.
      :rtype: Union[:class:`str`, :class:`discord.Embed`, :class:`dict`]



.. py:class:: HelpSelectMenu(commands, bot)

   Bases: :py:obj:`DiscordUtils.paginator.discord.ui.Select`\ [\ :py:obj:`HelpMenu`\ ]

   Represents a UI select menu.

   This is usually represented as a drop down menu.

   In order to get the selected items that the user has chosen, use :attr:`Select.values`.

   .. versionadded:: 2.0

   :param custom_id: The ID of the select menu that gets received during an interaction.
                     If not given then one is generated for you.
   :type custom_id: :class:`str`
   :param placeholder: The placeholder text that is shown if nothing is selected, if any.
   :type placeholder: Optional[:class:`str`]
   :param min_values: The minimum number of items that must be chosen for this select menu.
                      Defaults to 1 and must be between 1 and 25.
   :type min_values: :class:`int`
   :param max_values: The maximum number of items that must be chosen for this select menu.
                      Defaults to 1 and must be between 1 and 25.
   :type max_values: :class:`int`
   :param options: A list of options that can be selected in this menu.
   :type options: List[:class:`discord.SelectOption`]
   :param disabled: Whether the select is disabled or not.
   :type disabled: :class:`bool`
   :param row: The relative row this select menu belongs to. A Discord component can only have 5
               rows. By default, items are arranged automatically into those 5 rows. If you'd
               like to control the relative positioning of the row then passing an index is advised.
               For example, row=1 will show up before row=2. Defaults to ``None``, which is automatic
               ordering. The row number must be between 0 and 4 (i.e. zero indexed).
   :type row: Optional[:class:`int`]

   .. py:method:: __fill_options(self)


   .. py:method:: callback(self, interaction)
      :async:

      |coro|

      The callback associated with this UI item.

      This can be overridden by subclasses.

      :param interaction: The interaction that triggered this UI item.
      :type interaction: :class:`.Interaction`



.. py:class:: FrontPageSource

   Bases: :py:obj:`DiscordUtils.paginator.menus.PageSource`

   An interface representing a menu page's data source for the actual menu page.

   Subclasses must implement the backing resource along with the following methods:

   - :meth:`get_page`
   - :meth:`is_paginating`
   - :meth:`format_page`

   .. py:method:: is_paginating(self)

      An abstract method that notifies the :class:`MenuPages` whether or not
      to start paginating. This signals whether to add reactions or not.

      Subclasses must implement this.

      :returns: Whether to trigger pagination.
      :rtype: :class:`bool`


   .. py:method:: get_max_pages(self)

      An optional abstract method that retrieves the maximum number of pages
      this page source has. Useful for UX purposes.

      The default implementation returns ``None``.

      :returns: The maximum number of pages required to properly
                paginate the elements, if given.
      :rtype: Optional[:class:`int`]


   .. py:method:: get_page(self, page_number)
      :async:

      |coro|

      An abstract method that retrieves an object representing the object to format.

      Subclasses must implement this.

      .. note::

          The page_number is zero-indexed between [0, :meth:`get_max_pages`),
          if there is a maximum number of pages.

      :param page_number: The page number to access.
      :type page_number: :class:`int`

      :returns: The object represented by that page.
                This is passed into :meth:`format_page`.
      :rtype: Any


   .. py:method:: format_page(self, menu, page)

      |maybecoro|

      An abstract method to format the page.

      This method must return one of the following types.

      If this method returns a ``str`` then it is interpreted as returning
      the ``content`` keyword argument in :meth:`discord.Message.edit`
      and :meth:`discord.abc.Messageable.send`.

      If this method returns a :class:`discord.Embed` then it is interpreted
      as returning the ``embed`` keyword argument in :meth:`discord.Message.edit`
      and :meth:`discord.abc.Messageable.send`.

      If this method returns a ``dict`` then it is interpreted as the
      keyword-arguments that are used in both :meth:`discord.Message.edit`
      and :meth:`discord.abc.Messageable.send`. The two of interest are
      ``embed`` and ``content``.

      :param menu: The menu that wants to format this page.
      :type menu: :class:`Menu`
      :param page: The page returned by :meth:`PageSource.get_page`.
      :type page: Any

      :returns: See above.
      :rtype: Union[:class:`str`, :class:`discord.Embed`, :class:`dict`]



.. py:class:: HelpMenu(source, ctx)

   Bases: :py:obj:`DiscordUtils.paginator.RoboPages`

   Represents a UI view.

   This object must be inherited to create a UI within Discord.

   .. versionadded:: 2.0

   :param timeout: Timeout in seconds from last interaction with the UI before no longer accepting input.
                   If ``None`` then there is no timeout.
   :type timeout: Optional[:class:`float`]

   .. py:method:: add_categories(self, commands)


   .. py:method:: rebind(self, source, interaction)
      :async:



.. py:class:: PaginatedHelpCommand

   Bases: :py:obj:`DiscordUtils.paginator.commands.HelpCommand`

   The base implementation for help command formatting.

   .. note::

       Internally instances of this class are deep copied every time
       the command itself is invoked to prevent a race condition
       mentioned in :issue:`2123`.

       This means that relying on the state of this class to be
       the same between command invocations would not work as expected.

   .. attribute:: context

      The context that invoked this help formatter. This is generally set after
      the help command assigned, :func:`command_callback`\, has been called.

      :type: Optional[:class:`Context`]

   .. attribute:: show_hidden

      Specifies if hidden commands should be shown in the output.
      Defaults to ``False``.

      :type: :class:`bool`

   .. attribute:: verify_checks

      Specifies if commands should have their :attr:`.Command.checks` called
      and verified. If ``True``, always calls :attr:`.Command.checks`.
      If ``None``, only calls :attr:`.Command.checks` in a guild setting.
      If ``False``, never calls :attr:`.Command.checks`. Defaults to ``True``.

      .. versionchanged:: 1.7

      :type: Optional[:class:`bool`]

   .. attribute:: command_attrs

      A dictionary of options to pass in for the construction of the help command.
      This allows you to change the command behaviour without actually changing
      the implementation of the command. The attributes will be the same as the
      ones passed in the :class:`.Command` constructor.

      :type: :class:`dict`

   .. py:method:: get_command_signature(self, command)

      Retrieves the signature portion of the help page.

      .. versionchanged:: 2.0

          ``command`` parameter is now positional-only.

      :param command: The command to get the signature of.
      :type command: :class:`Command`

      :returns: The signature for the command.
      :rtype: :class:`str`


   .. py:method:: send_bot_help(self, mapping)
      :async:

      |coro|

      Handles the implementation of the bot command page in the help command.
      This function is called when the help command is called with no arguments.

      It should be noted that this method does not return anything -- rather the
      actual message sending should be done inside this method. Well behaved subclasses
      should use :meth:`get_destination` to know where to send, as this is a customisation
      point for other users.

      You can override this method to customise the behaviour.

      .. note::

          You can access the invocation context with :attr:`HelpCommand.context`.

          Also, the commands in the mapping are not filtered. To do the filtering
          you will have to call :meth:`filter_commands` yourself.

      .. versionchanged:: 2.0

          ``mapping`` parameter is now positional-only.

      :param mapping: A mapping of cogs to commands that have been requested by the user for help.
                      The key of the mapping is the :class:`~.commands.Cog` that the command belongs to, or
                      ``None`` if there isn't one, and the value is a list of commands that belongs to that cog.
      :type mapping: Mapping[Optional[:class:`Cog`], List[:class:`Command`]]


   .. py:method:: send_cog_help(self, cog)
      :async:

      |coro|

      Handles the implementation of the cog page in the help command.
      This function is called when the help command is called with a cog as the argument.

      It should be noted that this method does not return anything -- rather the
      actual message sending should be done inside this method. Well behaved subclasses
      should use :meth:`get_destination` to know where to send, as this is a customisation
      point for other users.

      You can override this method to customise the behaviour.

      .. note::

          You can access the invocation context with :attr:`HelpCommand.context`.

          To get the commands that belong to this cog see :meth:`Cog.get_commands`.
          The commands returned not filtered. To do the filtering you will have to call
          :meth:`filter_commands` yourself.

      .. versionchanged:: 2.0

          ``cog`` parameter is now positional-only.

      :param cog: The cog that was requested for help.
      :type cog: :class:`Cog`


   .. py:method:: common_command_formatting(self, embed_like, command)


   .. py:method:: send_command_help(self, command)
      :async:

      |coro|

      Handles the implementation of the single command page in the help command.

      It should be noted that this method does not return anything -- rather the
      actual message sending should be done inside this method. Well behaved subclasses
      should use :meth:`get_destination` to know where to send, as this is a customisation
      point for other users.

      You can override this method to customise the behaviour.

      .. note::

          You can access the invocation context with :attr:`HelpCommand.context`.

      .. admonition:: Showing Help
          :class: helpful

          There are certain attributes and methods that are helpful for a help command
          to show such as the following:

          - :attr:`Command.help`
          - :attr:`Command.brief`
          - :attr:`Command.short_doc`
          - :attr:`Command.description`
          - :meth:`get_command_signature`

          There are more than just these attributes but feel free to play around with
          these to help you get started to get the output that you want.

      .. versionchanged:: 2.0

          ``command`` parameter is now positional-only.

      :param command: The command that was requested for help.
      :type command: :class:`Command`


   .. py:method:: send_group_help(self, group)
      :async:

      |coro|

      Handles the implementation of the group page in the help command.
      This function is called when the help command is called with a group as the argument.

      It should be noted that this method does not return anything -- rather the
      actual message sending should be done inside this method. Well behaved subclasses
      should use :meth:`get_destination` to know where to send, as this is a customisation
      point for other users.

      You can override this method to customise the behaviour.

      .. note::

          You can access the invocation context with :attr:`HelpCommand.context`.

          To get the commands that belong to this group without aliases see
          :attr:`Group.commands`. The commands returned not filtered. To do the
          filtering you will have to call :meth:`filter_commands` yourself.

      .. versionchanged:: 2.0

          ``group`` parameter is now positional-only.

      :param group: The group that was requested for help.
      :type group: :class:`Group`



.. py:function:: format_dt(dt, style = None, ist = False)


.. py:function:: human_join(seq, delim=', ', final='or')


.. py:class:: plural(value)

   .. py:method:: __format__(self, format_spec)

      Default object formatter.



.. py:data:: units
   

   

.. py:class:: ShortTime(argument, *, now=None)

   .. py:attribute:: compiled
      

      

   .. py:method:: convert(cls, ctx, argument)
      :classmethod:
      :async:



.. py:class:: HumanTime(argument, *, now=None)

   .. py:attribute:: calendar
      

      

   .. py:method:: convert(cls, ctx, argument)
      :classmethod:
      :async:



.. py:class:: Time(argument, *, now=None)

   Bases: :py:obj:`HumanTime`


.. py:class:: FutureTime(argument, *, now=None)

   Bases: :py:obj:`Time`


.. py:class:: UserFriendlyTime(converter=None, *, default=None)

   Bases: :py:obj:`discord.ext.commands.Converter`

   That way quotes aren't absolutely necessary.

   .. py:method:: check_constraints(self, ctx, now, remaining)
      :async:


   .. py:method:: copy(self)


   .. py:method:: convert(self, ctx, argument)
      :async:

      |coro|

      The method to override to do conversion logic.

      If an error is found while converting, it is recommended to
      raise a :exc:`.CommandError` derived exception as it will
      properly propagate to the error handlers.

      :param ctx: The invocation context that the argument is being used in.
      :type ctx: :class:`.Context`
      :param argument: The argument that is being converted.
      :type argument: :class:`str`

      :raises CommandError: A generic exception occurred when converting the argument.
      :raises BadArgument: The converter failed to convert the argument.



.. py:function:: human_timedelta(dt, *, source=None, accuracy=3, brief=False, suffix=True)


.. py:function:: format_relative(dt)


.. py:class:: ReactionRolesButton(database, custom_id, emoji, y)

   Bases: :py:obj:`discord.ui.Button`\ [\ :py:obj:`ReactionPersistentView`\ ]

   The Reaction Roles Button

   .. py:method:: callback(self, interaction)
      :async:

      |coro|

      The callback associated with this UI item.

      This can be overridden by subclasses.

      :param interaction: The interaction that triggered this UI item.
      :type interaction: :class:`.Interaction`



.. py:class:: ReactionPersistentView(reactions_dict, database, custom_id)

   Bases: :py:obj:`discord.ui.View`

   Persistant view for the Reaction Role using buton

   .. py:attribute:: children
      :annotation: :List[ReactionRolesButton]

      


.. py:exception:: NoChannelProvided(message = None, *args)

   Bases: :py:obj:`discord.ext.commands.CommandError`

   Error raised when no suitable voice channel was supplied.


.. py:exception:: IncorrectChannelError(message = None, *args)

   Bases: :py:obj:`discord.ext.commands.CommandError`

   Error raised when commands are issued outside of the players session channel.


.. py:data:: letters
   

   

.. py:data:: r_letters
   

   

.. py:data:: contractions
   

   

.. py:data:: r_contractions
   

   

.. py:data:: punctuation
   

   

.. py:data:: r_punctuation
   

   

.. py:data:: numbers
   

   

.. py:data:: r_numbers
   

   

.. py:data:: dna
   

   

.. py:class:: ChannelAndMessageId

   Bases: :py:obj:`enum.IntEnum`

   Enum where members are also (and must be) ints

   .. py:attribute:: badges_channel
      :annotation: = 920536143458598930

      

   .. py:attribute:: backup_channel
      :annotation: = 922544732918415390

      

   .. py:attribute:: error_logs_channel
      :annotation: = 920190310942908513

      

   .. py:attribute:: server_id
      :annotation: = 920190307595874304

      

   .. py:attribute:: server_id2
      :annotation: = 920536143244709889

      

   .. py:attribute:: restartlog_channel1
      :annotation: = 920190310942908508

      

   .. py:attribute:: restartlog_channel2
      :annotation: = 920536143458598926

      

   .. py:attribute:: serverlog_channel1
      :annotation: = 920190310942908509

      

   .. py:attribute:: serverlog_channel2
      :annotation: = 920536143458598927

      


.. py:class:: BackupDatabse(ctx)

   The database class to handle the backup commands


   .. py:method:: create_backup(self)
      :async:

      |coro|
      It creates the backup of the server

      :return: The backup code
      :rtype: int


   .. py:method:: get_backup_data(self, code)
      :async:

      |coro|
      It returns the backup of the specified server

      :param code: The message containing that backup
      :type code: int
      :return: The json file which has the backup
      :rtype: Optional[discord.Attachment]


   .. py:method:: delete_backup_data(self, code)
      :async:

      |coro|
      Deletes the backup data against the specified code

      :param code: The backup code to delete
      :type code: int


   .. py:method:: apply_backup(self, code)
      :async:

      |coro|
      It applied backup with the backup code specified

      :param code:Backup Code
      :type code: int
      :return: :class:`str` is returned when there is a error otherwise a :class:`bool` with True value
      :rtype: Optional[Union[str, bool]]


   .. py:method:: return_category_channel(self, name)
      :async:

      It returns the category channel from the category name

      :param name: Category channel name
      :type name: str
      :return: See Above
      :rtype: Optional[discord.CategoryChannel]


   .. py:method:: return_role_overwrites(self, data)
      :async:

      Return the role overwrites dict with proper formatting

      :param data: Dict containing the role overwrites data
      :type data: dict
      :return: Role Overwrites with the proper formatting
      :rtype: dict


   .. py:method:: reason(code, author = None)
      :staticmethod:

      It generates the mod reason

      :param code: The backup code
      :type code: int
      :param author: The author who is using the backup, defaults to None
      :type author: Optional[Union[discord.Member, discord.User]], optional
      :return: The reason to be given in the `reason` parameter
      :rtype: str



.. py:class:: Badges(ctx)

   A database handler for the Badges class

   .. py:method:: get_all_badges(self)
      :async:

      |coro|
      Returns all the badges

      :return: List of all badges data
      :rtype: list


   .. py:method:: get_badge_code(badge_name)
      :staticmethod:

      Returns the badge code from its name

      :param badge_name: The name of the badge image
      :type badge_name: str
      :return: Badge Code
      :rtype: str



.. py:function:: _wrap_and_store_coroutine(cache, key, coro)


.. py:function:: _wrap_new_coroutine(value)


.. py:class:: ExpiringCache(seconds)

   Bases: :py:obj:`dict`

   dict() -> new empty dictionary
   dict(mapping) -> new dictionary initialized from a mapping object's
       (key, value) pairs
   dict(iterable) -> new dictionary initialized as if via:
       d = {}
       for k, v in iterable:
           d[k] = v
   dict(**kwargs) -> new dictionary initialized with the name=value pairs
       in the keyword argument list.  For example:  dict(one=1, two=2)

   .. py:method:: __verify_cache_integrity(self)


   .. py:method:: __contains__(self, key)

      True if the dictionary has the specified key, else False.


   .. py:method:: __getitem__(self, key)

      x.__getitem__(y) <==> x[y]


   .. py:method:: __setitem__(self, key, value)

      Set self[key] to value.



.. py:class:: Strategy

   Bases: :py:obj:`enum.Enum`

   Generic enumeration.

   Derive from this class to define new enumerations.

   .. py:attribute:: lru
      :annotation: = 1

      

   .. py:attribute:: raw
      :annotation: = 2

      

   .. py:attribute:: timed
      :annotation: = 3

      


.. py:function:: cache(maxsize=128, strategy=Strategy.lru, ignore_kwargs=False)


.. py:data:: imageslist
   :annotation: :list

   

.. py:function:: meek_api(name)
   :async:


.. py:function:: return_matching_emoji(bot, name)
   :async:


.. py:function:: insert_returns(body)


.. py:function:: copy_context_with(ctx, *, author=None, channel=None, **kwargs)
   :async:


.. py:function:: check_permissions(ctx, perms, *, check=all)
   :async:


.. py:function:: has_permissions(check=all, **perms)


.. py:function:: check_guild_permissions(ctx, perms, *, check=all)
   :async:


.. py:function:: has_guild_permissions(check=all, **perms)


.. py:function:: is_mod()


.. py:function:: is_admin()


.. py:function:: mod_or_permissions(**perms)


.. py:function:: admin_or_permissions(**perms)


.. py:function:: is_in_guilds(*guild_ids)


.. py:function:: serverinfo(guild, author, bot)
   :async:


.. py:function:: userinfo(user, guild, bot)
   :async:


.. py:function:: check_if_user_joined_a_voice(ctx)

   Checks is a user joined a voice channel


.. py:function:: check_if_user_joined_a_stage(ctx)

   Checks is a user joined a stage channel


.. py:function:: get_welcome_channel(guild, bot, inviter_or_guild_owner)
   :async:


.. py:class:: plural(value)

   .. py:method:: __format__(self, format_spec)

      Default object formatter.



.. py:function:: human_join(seq, delim=', ', final='or')


.. py:function:: secure_delete(path, passes = 3)

   At first it write the file with some random data , even repeatedly, then delete it
   Meaning the entire contents of the file were still intact and every pass just added to the overall size of the file. So it ended up being [Original Contents][Random Data of that Size][Random Data of that Size][Random Data of that Size] which is not the desired effect obviously
   Firstopen the file in append to find the length,
   then reopen in r+ so that it can seek to the beginning
   (in append mode it seems like what caused the undesired effect is that it was not actually possible to seek to 0)

   Answer was copied from stackoverflow with some type hinting changes :)
   https://stackoverflow.com/questions/17455300/python-securely-remove-file


.. py:function:: format_dt(dt, style = None, ist = False)


.. py:class:: ChannelAndMessageId

   Bases: :py:obj:`enum.IntEnum`

   Enum where members are also (and must be) ints

   .. py:attribute:: badges_channel
      :annotation: = 920536143458598930

      

   .. py:attribute:: backup_channel
      :annotation: = 922544732918415390

      

   .. py:attribute:: error_logs_channel
      :annotation: = 920190310942908513

      

   .. py:attribute:: server_id
      :annotation: = 920190307595874304

      

   .. py:attribute:: server_id2
      :annotation: = 920536143244709889

      

   .. py:attribute:: restartlog_channel1
      :annotation: = 920190310942908508

      

   .. py:attribute:: restartlog_channel2
      :annotation: = 920536143458598926

      

   .. py:attribute:: serverlog_channel1
      :annotation: = 920190310942908509

      

   .. py:attribute:: serverlog_channel2
      :annotation: = 920536143458598927

      


.. py:class:: LinksAndVars

   Bases: :py:obj:`enum.Enum`

   Generic enumeration.

   Derive from this class to define new enumerations.

   .. py:attribute:: website
      :annotation: = https://minato-namikaze.readthedocs.io/en/latest

      

   .. py:attribute:: github
      :annotation: = https://github.com/The-4th-Hokage/yondaime-hokage

      

   .. py:attribute:: github_branch
      :annotation: = master

      

   .. py:attribute:: bad_links
      :annotation: = https://raw.githubusercontent.com/The-4th-Hokage/bad-domains-list/master/bad-domains.txt

      

   .. py:attribute:: listing
      :annotation: = https://raw.githubusercontent.com/The-4th-Hokage/listing/master/listing.json

      

   .. py:attribute:: character_data
      :annotation: = https://raw.githubusercontent.com/The-4th-Hokage/naruto-card-game-images/master/img_data.json

      

   .. py:attribute:: statuspage_link
      :annotation: = https://minatonamikaze.statuspage.io

      

   .. py:attribute:: mal_logo
      :annotation: = https://cdn.myanimelist.net/images/event/15th_anniversary/top_page/item7.png

      

   .. py:attribute:: giveaway_image
      :annotation: = https://i.imgur.com/efLKnlh.png

      

   .. py:attribute:: version
      

      

   .. py:attribute:: invite_code
      :annotation: = vfXHwS3nmQ

      

   .. py:attribute:: timeout
      :annotation: = 3.0

      

   .. py:attribute:: owner_ids
      :annotation: = [887549958931247137, 837223478934896670, 747729781369602049]

      


.. py:data:: url_regex
   

   

.. py:data:: INVITE_URL_RE
   

   

.. py:function:: filter_invites(to_filter)

   Get a string with discord invites sanitized.

   Will match any discord.gg, discordapp.com/invite, discord.com/invite, discord.me, or discord.io/discord.li
   invite URL.

   :param to_filter: The string to filter.
   :type to_filter: str

   :returns: The sanitized string.
   :rtype: str


.. py:function:: convert(time)


.. py:function:: humanize_attachments(attachments)


.. py:function:: format_character_name(character_name)


.. py:function:: detect_bad_domains(message_content)
   :async:


.. py:class:: MemberID

   Bases: :py:obj:`discord.ext.commands.Converter`

   The base class of custom converters that require the :class:`.Context`
   to be passed to be useful.

   This allows you to implement converters that function similar to the
   special cased ``discord`` classes.

   Classes that derive from this should override the :meth:`~.Converter.convert`
   method to do its conversion logic. This method must be a :ref:`coroutine <coroutine>`.

   .. py:method:: convert(self, ctx, argument)
      :async:

      |coro|

      The method to override to do conversion logic.

      If an error is found while converting, it is recommended to
      raise a :exc:`.CommandError` derived exception as it will
      properly propagate to the error handlers.

      :param ctx: The invocation context that the argument is being used in.
      :type ctx: :class:`.Context`
      :param argument: The argument that is being converted.
      :type argument: :class:`str`

      :raises CommandError: A generic exception occurred when converting the argument.
      :raises BadArgument: The converter failed to convert the argument.



.. py:class:: ChannelAndMessageId

   Bases: :py:obj:`enum.IntEnum`

   Enum where members are also (and must be) ints

   .. py:attribute:: badges_channel
      :annotation: = 920536143458598930

      

   .. py:attribute:: backup_channel
      :annotation: = 922544732918415390

      

   .. py:attribute:: error_logs_channel
      :annotation: = 920190310942908513

      

   .. py:attribute:: server_id
      :annotation: = 920190307595874304

      

   .. py:attribute:: server_id2
      :annotation: = 920536143244709889

      

   .. py:attribute:: restartlog_channel1
      :annotation: = 920190310942908508

      

   .. py:attribute:: restartlog_channel2
      :annotation: = 920536143458598926

      

   .. py:attribute:: serverlog_channel1
      :annotation: = 920190310942908509

      

   .. py:attribute:: serverlog_channel2
      :annotation: = 920536143458598927

      


.. py:class:: Tokens

   Bases: :py:obj:`enum.Enum`

   Generic enumeration.

   Derive from this class to define new enumerations.

   .. py:attribute:: statcord
      

      

   .. py:attribute:: dagpi
      

      

   .. py:attribute:: chatbot
      

      

   .. py:attribute:: sentry_link
      

      

   .. py:attribute:: tenor
      

      

   .. py:attribute:: giphy
      

      

   .. py:attribute:: token
      

      

   .. py:attribute:: weather
      

      


.. py:class:: ConfirmationView(*, timeout, author_id, ctx, delete_after)

   Bases: :py:obj:`discord.ui.View`

   Represents a UI view.

   This object must be inherited to create a UI within Discord.

   .. versionadded:: 2.0

   :param timeout: Timeout in seconds from last interaction with the UI before no longer accepting input.
                   If ``None`` then there is no timeout.
   :type timeout: Optional[:class:`float`]

   .. py:method:: interaction_check(self, interaction)
      :async:

      |coro|

      A callback that is called when an interaction happens within the view
      that checks whether the view should process item callbacks for the interaction.

      This is useful to override if, for example, you want to ensure that the
      interaction author is a given user.

      The default implementation of this returns ``True``.

      .. note::

          If an exception occurs within the body then the check
          is considered a failure and :meth:`on_error` is called.

      :param interaction: The interaction that occurred.
      :type interaction: :class:`~discord.Interaction`

      :returns: Whether the view children's callbacks should be called.
      :rtype: :class:`bool`


   .. py:method:: on_timeout(self)
      :async:

      |coro|

      A callback that is called when a view's timeout elapses without being explicitly stopped.


   .. py:method:: confirm(self, button, interaction)
      :async:


   .. py:method:: cancel(self, button, interaction)
      :async:



.. py:class:: Context(*, message, bot, view, args = MISSING, kwargs = MISSING, prefix = None, command = None, invoked_with = None, invoked_parents = MISSING, invoked_subcommand = None, subcommand_passed = None, command_failed = False, current_parameter = None, current_argument = None, interaction = None)

   Bases: :py:obj:`discord.ext.commands.Context`

   Represents the context in which a command is being invoked under.

   This class contains a lot of meta data to help you understand more about
   the invocation context. This class is not created manually and is instead
   passed around to commands as the first parameter.

   This class implements the :class:`~discord.abc.Messageable` ABC.

   .. attribute:: message

      The message that triggered the command being executed.

      .. note::

          In the case of an interaction based context, this message is "synthetic"
          and does not actually exist. Therefore, the ID on it is invalid similar
          to ephemeral messages.

      :type: :class:`.Message`

   .. attribute:: bot

      The bot that contains the command being executed.

      :type: :class:`.Bot`

   .. attribute:: args

      The list of transformed arguments that were passed into the command.
      If this is accessed during the :func:`.on_command_error` event
      then this list could be incomplete.

      :type: :class:`list`

   .. attribute:: kwargs

      A dictionary of transformed arguments that were passed into the command.
      Similar to :attr:`args`\, if this is accessed in the
      :func:`.on_command_error` event then this dict could be incomplete.

      :type: :class:`dict`

   .. attribute:: current_parameter

      The parameter that is currently being inspected and converted.
      This is only of use for within converters.

      .. versionadded:: 2.0

      :type: Optional[:class:`Parameter`]

   .. attribute:: current_argument

      The argument string of the :attr:`current_parameter` that is currently being converted.
      This is only of use for within converters.

      .. versionadded:: 2.0

      :type: Optional[:class:`str`]

   .. attribute:: interaction

      The interaction associated with this context.

      .. versionadded:: 2.0

      :type: Optional[:class:`~discord.Interaction`]

   .. attribute:: prefix

      The prefix that was used to invoke the command. For interaction based contexts,
      this is ``/`` for slash commands and ``\u200b`` for context menu commands.

      :type: Optional[:class:`str`]

   .. attribute:: command

      The command that is being invoked currently.

      :type: Optional[:class:`Command`]

   .. attribute:: invoked_with

      The command name that triggered this invocation. Useful for finding out
      which alias called the command.

      :type: Optional[:class:`str`]

   .. attribute:: invoked_parents

      The command names of the parents that triggered this invocation. Useful for
      finding out which aliases called the command.

      For example in commands ``?a b c test``, the invoked parents are ``['a', 'b', 'c']``.

      .. versionadded:: 1.7

      :type: List[:class:`str`]

   .. attribute:: invoked_subcommand

      The subcommand that was invoked.
      If no valid subcommand was invoked then this is equal to ``None``.

      :type: Optional[:class:`Command`]

   .. attribute:: subcommand_passed

      The string that was attempted to call a subcommand. This does not have
      to point to a valid registered subcommand and could just point to a
      nonsense string. If nothing was passed to attempt a call to a
      subcommand then this is set to ``None``.

      :type: Optional[:class:`str`]

   .. attribute:: command_failed

      A boolean that indicates if the command failed to be parsed, checked,
      or invoked.

      :type: :class:`bool`

   .. py:method:: entry_to_code(self, entries)
      :async:


   .. py:method:: indented_entry_to_code(self, entries)
      :async:


   .. py:method:: __repr__(self)

      Return repr(self).


   .. py:method:: session(self)
      :property:


   .. py:method:: replied_reference(self)


   .. py:method:: disambiguate(self, matches, entry)
      :async:


   .. py:method:: prompt(self, message, *, timeout = 60.0, delete_after = True, author_id = None)
      :async:

      An interactive reaction confirmation dialog.
      :param message: The message to show along with the prompt.
      :type message: str
      :param timeout: How long to wait before returning.
      :type timeout: float
      :param delete_after: Whether to delete the confirmation message after we're done.
      :type delete_after: bool
      :param author_id: The member who should respond to the prompt. Defaults to the author of the
                        Context's message.
      :type author_id: Optional[int]

      :returns: ``True`` if explicit confirm,
                ``False`` if explicit deny,
                ``None`` if deny due to timeout
      :rtype: Optional[bool]


   .. py:method:: show_help(self, command=None)
      :async:

      Shows the help command for the specified command if given.
      If no command is given, then it'll show help for the current
      command.


   .. py:method:: safe_send(self, content, *, escape_mentions=True, **kwargs)
      :async:

      Same as send except with some safe guards.
      1) If the message is too long then it sends a file with the results instead.
      2) If ``escape_mentions`` is ``True`` then it escapes mentions.


   .. py:method:: get_user(self, user)


   .. py:method:: get_dm(self, user)
      :async:


   .. py:method:: get_roles(self, role)


   .. py:method:: get_emoji(self, emoji)


   .. py:method:: get_guild(self, guild)


   .. py:method:: get_config_emoji_by_name_or_id(self, emoji)


   .. py:method:: get_config_channel_by_name_or_id(self, channel)


   .. py:method:: get_random_image_from_tag(tag_name)
      :staticmethod:


   .. py:method:: get_random_image_from_tag(tag_name)
      :staticmethod:
      :async:


   .. py:method:: tenor(tag_name)
      :staticmethod:


   .. py:method:: giphy(tag_name)
      :staticmethod:


   .. py:method:: tenor(tag_name)
      :staticmethod:
      :async:


   .. py:method:: giphy(tag_name)
      :staticmethod:
      :async:



.. py:class:: LinksAndVars

   Bases: :py:obj:`enum.Enum`

   Generic enumeration.

   Derive from this class to define new enumerations.

   .. py:attribute:: website
      :annotation: = https://minato-namikaze.readthedocs.io/en/latest

      

   .. py:attribute:: github
      :annotation: = https://github.com/The-4th-Hokage/yondaime-hokage

      

   .. py:attribute:: github_branch
      :annotation: = master

      

   .. py:attribute:: bad_links
      :annotation: = https://raw.githubusercontent.com/The-4th-Hokage/bad-domains-list/master/bad-domains.txt

      

   .. py:attribute:: listing
      :annotation: = https://raw.githubusercontent.com/The-4th-Hokage/listing/master/listing.json

      

   .. py:attribute:: character_data
      :annotation: = https://raw.githubusercontent.com/The-4th-Hokage/naruto-card-game-images/master/img_data.json

      

   .. py:attribute:: statuspage_link
      :annotation: = https://minatonamikaze.statuspage.io

      

   .. py:attribute:: mal_logo
      :annotation: = https://cdn.myanimelist.net/images/event/15th_anniversary/top_page/item7.png

      

   .. py:attribute:: giveaway_image
      :annotation: = https://i.imgur.com/efLKnlh.png

      

   .. py:attribute:: version
      

      

   .. py:attribute:: invite_code
      :annotation: = vfXHwS3nmQ

      

   .. py:attribute:: timeout
      :annotation: = 3.0

      

   .. py:attribute:: owner_ids
      :annotation: = [887549958931247137, 837223478934896670, 747729781369602049]

      


.. py:class:: VotingMenu(bot)

   Bases: :py:obj:`discord.ext.menus.Menu`

   An interface that allows handling menus by using reactions as buttons.

   Buttons should be marked with the :func:`button` decorator. Please note that
   this expects the methods to have a single parameter, the ``payload``. This
   ``payload`` is of type :class:`discord.RawReactionActionEvent`.

   .. attribute:: timeout

      The timeout to wait between button inputs.

      :type: :class:`float`

   .. attribute:: delete_message_after

      Whether to delete the message after the menu interaction is done.

      :type: :class:`bool`

   .. attribute:: clear_reactions_after

      Whether to clear reactions after the menu interaction is done.
      Note that :attr:`delete_message_after` takes priority over this attribute.
      If the bot does not have permissions to clear the reactions then it will
      delete the reactions one by one.

      :type: :class:`bool`

   .. attribute:: check_embeds

      Whether to verify embed permissions as well.

      :type: :class:`bool`

   .. attribute:: ctx

      The context that started this pagination session or ``None`` if it hasn't
      been started yet.

      :type: Optional[:class:`commands.Context`]

   .. attribute:: bot

      The bot that is running this pagination session or ``None`` if it hasn't
      been started yet.

      :type: Optional[:class:`commands.Bot`]

   .. attribute:: message

      The message that has been sent for handling the menu. This is the returned
      message of :meth:`send_initial_message`. You can set it in order to avoid
      calling :meth:`send_initial_message`\, if for example you have a pre-existing
      message you want to attach a menu to.

      :type: Optional[:class:`discord.Message`]

   .. py:method:: send_initial_message(self, ctx, channel)
      :async:

      |coro|

      Sends the initial message for the menu session.

      This is internally assigned to the :attr:`message` attribute.

      Subclasses must implement this if they don't set the
      :attr:`message` attribute themselves before starting the
      menu via :meth:`start`.

      :param ctx: The invocation context to use.
      :type ctx: :class:`Context`
      :param channel: The messageable to send the message to.
      :type channel: :class:`discord.abc.Messageable`

      :returns: The message that has been sent.
      :rtype: :class:`discord.Message`


   .. py:method:: on_check_mark(self, payload)
      :async:


   .. py:method:: on_stop(self, payload)
      :async:



.. py:class:: PrivacyPolicy(bot)

   Bases: :py:obj:`discord.ext.menus.Menu`

   An interface that allows handling menus by using reactions as buttons.

   Buttons should be marked with the :func:`button` decorator. Please note that
   this expects the methods to have a single parameter, the ``payload``. This
   ``payload`` is of type :class:`discord.RawReactionActionEvent`.

   .. attribute:: timeout

      The timeout to wait between button inputs.

      :type: :class:`float`

   .. attribute:: delete_message_after

      Whether to delete the message after the menu interaction is done.

      :type: :class:`bool`

   .. attribute:: clear_reactions_after

      Whether to clear reactions after the menu interaction is done.
      Note that :attr:`delete_message_after` takes priority over this attribute.
      If the bot does not have permissions to clear the reactions then it will
      delete the reactions one by one.

      :type: :class:`bool`

   .. attribute:: check_embeds

      Whether to verify embed permissions as well.

      :type: :class:`bool`

   .. attribute:: ctx

      The context that started this pagination session or ``None`` if it hasn't
      been started yet.

      :type: Optional[:class:`commands.Context`]

   .. attribute:: bot

      The bot that is running this pagination session or ``None`` if it hasn't
      been started yet.

      :type: Optional[:class:`commands.Bot`]

   .. attribute:: message

      The message that has been sent for handling the menu. This is the returned
      message of :meth:`send_initial_message`. You can set it in order to avoid
      calling :meth:`send_initial_message`\, if for example you have a pre-existing
      message you want to attach a menu to.

      :type: Optional[:class:`discord.Message`]

   .. py:method:: send_initial_message(self, ctx, channel)
      :async:

      |coro|

      Sends the initial message for the menu session.

      This is internally assigned to the :attr:`message` attribute.

      Subclasses must implement this if they don't set the
      :attr:`message` attribute themselves before starting the
      menu via :meth:`start`.

      :param ctx: The invocation context to use.
      :type ctx: :class:`Context`
      :param channel: The messageable to send the message to.
      :type channel: :class:`discord.abc.Messageable`

      :returns: The message that has been sent.
      :rtype: :class:`discord.Message`


   .. py:method:: on_add(self, payload)
      :async:


   .. py:method:: on_stop(self, payload)
      :async:



.. py:class:: MenuSource(data)

   Bases: :py:obj:`discord.ext.menus.ListPageSource`

   A data source for a sequence of items.

   This page source does not handle any sort of formatting, leaving it up
   to the user. To do so, implement the :meth:`format_page` method.

   .. attribute:: entries

      The sequence of items to paginate.

      :type: Sequence[Any]

   .. attribute:: per_page

      How many elements are in a page.

      :type: :class:`int`

   .. py:method:: format_page(self, menu, data)
      :async:

      |maybecoro|

      An abstract method to format the page.

      This method must return one of the following types.

      If this method returns a ``str`` then it is interpreted as returning
      the ``content`` keyword argument in :meth:`discord.Message.edit`
      and :meth:`discord.abc.Messageable.send`.

      If this method returns a :class:`discord.Embed` then it is interpreted
      as returning the ``embed`` keyword argument in :meth:`discord.Message.edit`
      and :meth:`discord.abc.Messageable.send`.

      If this method returns a ``dict`` then it is interpreted as the
      keyword-arguments that are used in both :meth:`discord.Message.edit`
      and :meth:`discord.abc.Messageable.send`. The two of interest are
      ``embed`` and ``content``.

      :param menu: The menu that wants to format this page.
      :type menu: :class:`Menu`
      :param page: The page returned by :meth:`PageSource.get_page`.
      :type page: Any

      :returns: See above.
      :rtype: Union[:class:`str`, :class:`discord.Embed`, :class:`dict`]



.. py:data:: BASE_DIR
   

   

.. py:data:: dotenv_file
   

   

.. py:function:: token_get(tokenname)


.. py:data:: api_image_store_dir
   

   

.. py:data:: DEFAULT_COMMAND_SELECT_LENGTH
   :annotation: = 25

   

.. py:class:: ShinobiMatch

   Bases: :py:obj:`list`, :py:obj:`enum.Enum`

   Built-in mutable sequence.

   If no argument is given, the constructor creates a new empty list.
   The argument must be an iterable if specified.

   .. py:attribute:: character_side_exclude
      :annotation: = ['anbu', 'iwagakure', 'kumogakure', 'kirigakure', 'otogakure', 'sunagakure', 'akatsuki', 'konohagakure']

      

   .. py:attribute:: name_exclusion
      

      


.. py:class:: RaidMode

   Bases: :py:obj:`enum.Enum`

   Generic enumeration.

   Derive from this class to define new enumerations.

   .. py:attribute:: off
      :annotation: = 0

      

   .. py:attribute:: on
      :annotation: = 1

      

   .. py:attribute:: strict
      :annotation: = 2

      


.. py:class:: Webhooks

   Bases: :py:obj:`enum.Enum`

   Generic enumeration.

   Derive from this class to define new enumerations.

   .. py:attribute:: logs
      

      

   .. py:attribute:: feedback
      

      


.. py:class:: Database

   Bases: :py:obj:`enum.Enum`

   Generic enumeration.

   Derive from this class to define new enumerations.

   .. py:attribute:: database_category_name
      :annotation: = DATABASE

      

   .. py:attribute:: database_channel_name
      :annotation: = setup vars

      

   .. py:attribute:: antiraid_channel_name
      :annotation: = antiraid

      

   .. py:attribute:: mentionspam_channel_name
      :annotation: = mentionspam

      

   .. py:attribute:: reaction_roles_channel_name
      :annotation: = reaction roles

      

   .. py:attribute:: giveaway_time_channel_name
      :annotation: = giveaway

      

   .. py:attribute:: user_blacklist_channel_name
      :annotation: = user blacklist

      

   .. py:attribute:: server_blacklist_channel_name
      :annotation: = server blacklist

      


.. py:class:: Methods

   Bases: :py:obj:`enum.IntEnum`

   Enum where members are also (and must be) ints

   .. py:attribute:: GET
      :annotation: = 1

      

   .. py:attribute:: POST
      :annotation: = 2

      

   .. py:attribute:: DELETE
      :annotation: = 3

      


.. py:data:: LATTICES
   :annotation: :dict

   

.. py:data:: IMAGES
   :annotation: :dict

   

.. py:data:: UNITS
   :annotation: :dict

   

.. py:data:: minato_gif
   :annotation: = []

   

.. py:data:: among_us
   

   

.. py:data:: url_regex
   

   

.. py:data:: log
   

   

.. py:data:: ch
   

   

.. py:data:: formatter
   

   

.. py:data:: FATESLIST_BASE_URI
   :annotation: = https://api.fateslist.xyz/

   

.. py:data:: DISCORD_SERVERVICES_BASE_URI
   :annotation: = https://api.discordservices.net/bot/

   

.. py:function:: post_handler(method, url, header = None, headers = None, data = None, json = None, log_data = False, return_data = True, return_json = False, getrequestobj = False)
   :async:


.. py:function:: ratelimit_handler(req, url, method, headers, data, print_logs = False)
   :async:


.. py:function:: post_commands(bot, print_logs = False)
   :async:


