:py:mod:`periodic_table`
========================

.. py:module:: periodic_table


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   periodic_table.ElementConverter
   periodic_table.MeasurementConverter
   periodic_table.Elements



Functions
~~~~~~~~~

.. autoapisummary::

   periodic_table.setup



.. py:class:: ElementConverter

   Bases: :py:obj:`discord.ext.commands.converter.Converter`

   Converts a given argument to an element object

   .. py:method:: convert(self, ctx, argument)
      :async:

      |coro|

      The method to override to do conversion logic.

      If an error is found while converting, it is recommended to
      raise a :exc:`.CommandError` derived exception as it will
      properly propagate to the error handlers.

      :param ctx: The invocation context that the argument is being used in.
      :type ctx: :class:`.Context`
      :param argument: The argument that is being converted.
      :type argument: :class:`str`

      :raises CommandError: A generic exception occurred when converting the argument.
      :raises BadArgument: The converter failed to convert the argument.



.. py:class:: MeasurementConverter

   Bases: :py:obj:`discord.ext.commands.converter.Converter`

   Converts a given measurement type into usable strings

   .. py:method:: convert(self, ctx, argument)
      :async:

      |coro|

      The method to override to do conversion logic.

      If an error is found while converting, it is recommended to
      raise a :exc:`.CommandError` derived exception as it will
      properly propagate to the error handlers.

      :param ctx: The invocation context that the argument is being used in.
      :type ctx: :class:`.Context`
      :param argument: The argument that is being converted.
      :type argument: :class:`str`

      :raises CommandError: A generic exception occurred when converting the argument.
      :raises BadArgument: The converter failed to convert the argument.



.. py:class:: Elements(bot)

   Bases: :py:obj:`discord.ext.commands.Cog`

   The base class that all cogs must inherit from.

   A cog is a collection of commands, listeners, and optional state to
   help group commands together. More information on them can be found on
   the :ref:`ext_commands_cogs` page.

   When inheriting from this class, the options shown in :class:`CogMeta`
   are equally valid here.

   .. py:method:: display_emoji(self)
      :property:


   .. py:method:: get_lattice_string(element)
      :staticmethod:


   .. py:method:: get_xray_wavelength(element)
      :staticmethod:


   .. py:method:: element(self, ctx, element, measurement = None)
      :async:

      Display information about an element
      `element` can be the name, symbol or atomic number of the element
      `measurement` can be any of the Elements data listed here
      https://mendeleev.readthedocs.io/en/stable/data.html#electronegativities


   .. py:method:: elements(self, ctx, *elements)
      :async:

      Display information about multiple elements
      `elements` can be the name, symbol or atomic number of the element
      separated by spaces


   .. py:method:: ptable(self, ctx)
      :async:

      Display a menu of all elements


   .. py:method:: element_embed(self, element)
      :async:



.. py:function:: setup(bot)


