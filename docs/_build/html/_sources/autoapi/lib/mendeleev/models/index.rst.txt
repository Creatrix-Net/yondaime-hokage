:py:mod:`lib.mendeleev.models`
==============================

.. py:module:: lib.mendeleev.models

.. autoapi-nested-parse::

   module specifying the database models



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   lib.mendeleev.models.Element
   lib.mendeleev.models.IonicRadius
   lib.mendeleev.models.IonizationEnergy
   lib.mendeleev.models.OxidationState
   lib.mendeleev.models.Series
   lib.mendeleev.models.Isotope
   lib.mendeleev.models.ScreeningConstant




.. py:class:: Element

   Bases: :py:obj:`Base`

   Chemical element.
   For full list of available data with references see :doc:`data`.
   :param abundance_crust: Abundance in the earth's crust in mg/kg
   :type abundance_crust: float
   :param abundance_sea: Abundance in the seas in mg/L
   :type abundance_sea: float
   :param annotation: Annotations regarding the data
   :type annotation: str
   :param atomic_number: Atomic number
   :type atomic_number: int
   :param atomic_radius: Atomic radius in pm
   :type atomic_radius: float
   :param atomic_radius_rahm: Atomic radius by Rahm et al. in pm
   :type atomic_radius_rahm: float
   :param atomic_volume: Atomic volume in cm3/mol
   :type atomic_volume: float
   :param atomic_weight: Relative atomic weight as the ratio of the average mass of atoms
                         of the element to 1/12 of the mass of an atom of 12C
   :type atomic_weight: float
   :param block: Block in periodic table, s, p, d, f
   :type block: str
   :param boiling_point: Boiling temperature in K
   :type boiling_point: float
   :param c6: C_6 dispersion coefficient in a.u. from X. Chu & A. Dalgarno, J. Chem. Phys.,
              121(9), 4083–4088 (2004) doi:10.1063/1.1779576, and the value for
              Hydrogen was taken from K. T. Tang, J. M. Norbeck and P. R. Certain,
              J. Chem. Phys. 64, 3063 (1976), doi:10.1063/1.432569
   :type c6: float
   :param c6_gb: C_6 dispersion coefficient in a.u. from Gould, T., & Bučko, T. (2016).
                 JCTC, 12(8), 3603–3613. https://doi.org/10.1021/acs.jctc.6b00361
   :type c6_gb: float
   :param cas: Chemical Abstracts Service identifier
   :type cas: str
   :param covalent_radius_bragg: Covalent radius in pm from
   :type covalent_radius_bragg: float
   :param covalent_radius_cordero: Covalent radius in pm from Cordero, B., Gómez, V., Platero-Prats, A.
                                   E., Revés, M., Echeverría, J., Cremades, E., … Alvarez, S. (2008).
                                   Covalent radii revisited. Dalton Transactions, (21), 2832.
                                   doi:10.1039/b801115j
   :type covalent_radius_cordero: float
   :param covalent_radius_pyykko: Single bond covalent radius in pm Pyykkö, P., & Atsumi, M. (2009).
                                  Molecular Single-Bond Covalent Radii for Elements 1-118.
                                  Chemistry - A European Journal, 15(1), 186–197.
                                  doi:10.1002/chem.200800987
   :type covalent_radius_pyykko: float
   :param covalent_radius_pyykko_double: Double bond covalent radius in pm from P. Pyykkö et al.
   :type covalent_radius_pyykko_double: float
   :param covalent_radius_pyykko_triple: Triple bond covalent radius in pm from P. Pyykkö et al.
   :type covalent_radius_pyykko_triple: float
   :param cpk_color: CPK color of the atom in HEX, see https://jmol.sourceforge.net/jscolors/#color_U
   :type cpk_color: str
   :param density: Density at 295K in g/cm3
   :type density: float
   :param description: Short description of the element
   :type description: str
   :param dipole_polarizability: Dipole polarizability in atomic units
   :type dipole_polarizability: float
   :param dipole_polarizability_unc: Uncertainty of the dipole polarizability
   :type dipole_polarizability_unc: float
   :param discoverers: The discoverers of the element
   :type discoverers: str
   :param discovery_location: The location where the element was discovered
   :type discovery_location: str
   :param discovery_year: The year the element was discovered
   :type discovery_year: int
   :param electron_affinity: Electron affinity in eV
   :type electron_affinity: float
   :param electrophilicity: Parr's electrophilicity index
   :type electrophilicity: float
   :param econf: Ground state electron configuration
   :type econf: str
   :param evaporation_heat: Evaporation heat in kJ/mol
   :type evaporation_heat: float
   :param fusion_heat: Fusion heat in kJ/mol
   :type fusion_heat: float
   :param gas_basicity: Gas basicity
   :type gas_basicity: float
   :param geochemical_class: Geochemical classification of the elements
   :type geochemical_class: str
   :param glawe_number: Glawe number (scale)
   :type glawe_number: int
   :param goldschmidt_class: Goldschmidt classification of the elements
   :type goldschmidt_class: str
   :param group_id: Group number
   :type group_id: int
   :param heat_of_formation: Heat of formation in kJ/mol
   :type heat_of_formation: float
   :param is_monoisotopic: A flag marking if the element is monoisotopic
   :type is_monoisotopic: bool
   :param jmol_color: Color of the atom as used in Jmol, in HEX,
                      see https://jmol.sourceforge.net/jscolors/#color_U
   :type jmol_color: str
   :param lattice_constant: Lattice constant in ang
   :type lattice_constant: float
   :param lattice_structure: Lattice structure code
   :type lattice_structure: str
   :param mass: Relative atomic mass. Ratio of the average mass of atoms
                of the element to 1/12 of the mass of an atom of 12C
   :type mass: float
   :param mendeleev_number: Mendeleev number
   :type mendeleev_number: int
   :param melting_point: Melting temperature in K
   :type melting_point: float
   :param metallic_radius: Single-bond metallic radius or metallic radius, have been
                           calculated by Pauling using interatomic distances and an
                           equation relating such distances with bond number
   :type metallic_radius: float
   :param metallic_radius_c12: Metallic radius obtained by Pauling with an assumed number of
                               nearest neighbors equal to 12
   :type metallic_radius_c12: float
   :param molcas_gv_color: Color of an atom in HEX from MOLCAS GV https://www.molcas.org/GV/
   :type molcas_gv_color: str
   :param name: Name in English
   :type name: str
   :param name_origin: Origin of the name
   :type name_origin: str
   :param period: Period in periodic table
   :type period: int
   :param pettifor_number: Pettifor scale
   :type pettifor_number: int
   :param proton_affinity: Proton affinity
   :type proton_affinity: Float
   :param series: Index to chemical series
   :type series: int
   :param sources: Sources of the element
   :type sources: str
   :param specific_heat: Specific heat in J/g mol @ 20 C
   :type specific_heat: float
   :param symbol: Chemical symbol
   :type symbol: str
   :param thermal_conductivity: Thermal conductivity in @/m K @25 C
   :type thermal_conductivity: float
   :param uses: Uses of the element
   :type uses: str
   :param vdw_radius: Van der Waals radius in pm from W. M. Haynes, Handbook of Chemistry and
                      Physics 95th Edition, CRC Press, New York, 2014, ISBN-10: 1482208679,
                      ISBN-13: 978-1482208672.
   :type vdw_radius: float
   :param vdw_radius_bondi: Van der Waals radius according to Bondi in pm
   :type vdw_radius_bondi: float
   :param vdw_radius_truhlar: Van der Waals radius according to Truhlar in pm
   :type vdw_radius_truhlar: float
   :param vdw_radius_rt: Van der Waals radius according to Rowland and Taylor in pm
   :type vdw_radius_rt: float
   :param vdw_radius_batsanov: Van der Waals radius according to Batsanov in pm
   :type vdw_radius_batsanov: float
   :param vdw_radius_dreiding: Van der Waals radius from the DREIDING force field in pm
   :type vdw_radius_dreiding: float
   :param vdw_radius_uff: Van der Waals radius from the UFF in pm
   :type vdw_radius_uff: float
   :param vdw_radius_mm3: Van der Waals radius from MM3 in pm
   :type vdw_radius_mm3: float
   :param oxistates: Oxidation states
   :type oxistates: list
   :param ionenergies: Ionization energies in eV parsed from
                       https://physics.nist.gov/cgi-bin/ASD/ie.pl on April 13, 2015
   :type ionenergies: dict

   .. py:attribute:: __tablename__
      :annotation: = elements

      

   .. py:attribute:: abundance_crust
      

      

   .. py:attribute:: abundance_sea
      

      

   .. py:attribute:: annotation
      

      

   .. py:attribute:: atomic_number
      

      

   .. py:attribute:: atomic_radius
      

      

   .. py:attribute:: atomic_radius_rahm
      

      

   .. py:attribute:: atomic_volume
      

      

   .. py:attribute:: atomic_weight
      

      

   .. py:attribute:: atomic_weight_uncertainty
      

      

   .. py:attribute:: block
      

      

   .. py:attribute:: boiling_point
      

      

   .. py:attribute:: cas
      

      

   .. py:attribute:: covalent_radius_bragg
      

      

   .. py:attribute:: covalent_radius_cordero
      

      

   .. py:attribute:: covalent_radius_pyykko
      

      

   .. py:attribute:: covalent_radius_pyykko_double
      

      

   .. py:attribute:: covalent_radius_pyykko_triple
      

      

   .. py:attribute:: c6
      

      

   .. py:attribute:: c6_gb
      

      

   .. py:attribute:: cpk_color
      

      

   .. py:attribute:: density
      

      

   .. py:attribute:: description
      

      

   .. py:attribute:: dipole_polarizability
      

      

   .. py:attribute:: dipole_polarizability_unc
      

      

   .. py:attribute:: discoverers
      

      

   .. py:attribute:: discovery_location
      

      

   .. py:attribute:: discovery_year
      

      

   .. py:attribute:: electron_affinity
      

      

   .. py:attribute:: en_allen
      

      

   .. py:attribute:: en_ghosh
      

      

   .. py:attribute:: en_pauling
      

      

   .. py:attribute:: econf
      

      

   .. py:attribute:: evaporation_heat
      

      

   .. py:attribute:: fusion_heat
      

      

   .. py:attribute:: gas_basicity
      

      

   .. py:attribute:: geochemical_class
      

      

   .. py:attribute:: glawe_number
      

      

   .. py:attribute:: goldschmidt_class
      

      

   .. py:attribute:: group_id
      

      

   .. py:attribute:: group
      

      

   .. py:attribute:: heat_of_formation
      

      

   .. py:attribute:: is_monoisotopic
      

      

   .. py:attribute:: is_radioactive
      

      

   .. py:attribute:: jmol_color
      

      

   .. py:attribute:: lattice_constant
      

      

   .. py:attribute:: lattice_structure
      

      

   .. py:attribute:: melting_point
      

      

   .. py:attribute:: mendeleev_number
      

      

   .. py:attribute:: metallic_radius
      

      

   .. py:attribute:: metallic_radius_c12
      

      

   .. py:attribute:: molcas_gv_color
      

      

   .. py:attribute:: name
      

      

   .. py:attribute:: name_origin
      

      

   .. py:attribute:: period
      

      

   .. py:attribute:: pettifor_number
      

      

   .. py:attribute:: proton_affinity
      

      

   .. py:attribute:: _series_id
      

      

   .. py:attribute:: _series
      

      

   .. py:attribute:: series
      

      

   .. py:attribute:: sources
      

      

   .. py:attribute:: specific_heat
      

      

   .. py:attribute:: symbol
      

      

   .. py:attribute:: thermal_conductivity
      

      

   .. py:attribute:: uses
      

      

   .. py:attribute:: vdw_radius
      

      

   .. py:attribute:: vdw_radius_alvarez
      

      

   .. py:attribute:: vdw_radius_bondi
      

      

   .. py:attribute:: vdw_radius_truhlar
      

      

   .. py:attribute:: vdw_radius_rt
      

      

   .. py:attribute:: vdw_radius_batsanov
      

      

   .. py:attribute:: vdw_radius_dreiding
      

      

   .. py:attribute:: vdw_radius_uff
      

      

   .. py:attribute:: vdw_radius_mm3
      

      

   .. py:attribute:: ionic_radii
      

      

   .. py:attribute:: _ionization_energies
      

      

   .. py:attribute:: _oxidation_states
      

      

   .. py:attribute:: isotopes
      

      

   .. py:attribute:: screening_constants
      

      

   .. py:method:: init_on_load(self)

      Initialize the ElectronicConfiguration class as attribute of self


   .. py:method:: ionenergies(self)

      Return a dict with ionization degree as keys and ionization energies
      in eV as values.


   .. py:method:: oxistates(self)

      Return the oxidation states as a list of ints


   .. py:method:: sconst(self)

      Return a dict with screening constants with tuples (n, s) as keys and
      screening constants as values


   .. py:method:: electrons(self)

      Return the number of electrons.


   .. py:method:: neutrons(self)

      Return the number of neutrons of the most abundant natural stable
      isotope.


   .. py:method:: protons(self)

      Return the number of protons.


   .. py:method:: mass(self)

      Return the `atomic_weight` if defined or mass number otherwise.


   .. py:method:: mass_number(self)

      Return the mass number of the most abundant natural stable isotope


   .. py:method:: mass_str(self)

      String representation of atomic weight


   .. py:method:: covalent_radius(self)

      Return the default covalent radius which is covalent_radius_pyykko


   .. py:method:: hardness(self, charge = 0)

      Return the absolute hardness, calculated as
      :param charge: Charge of the cation for which the hardness will be calculated

      .. math::
         \eta = \\frac{IE - EA}{2}
      where:
      - :math:`IE` is the ionization energy,
      - :math`EA` is the electron affinity


   .. py:method:: softness(self, charge = 0)

      Return the absolute softness, calculated as
      :param charge: Charge of the cation for which the hardness will be calculated

      .. math::
         S = \\frac{1}{2\eta}
      where :
      - :math:`\eta` is the absolute hardness


   .. py:method:: zeff(self, n = None, o = None, method = 'slater', alle = False)

      Return the effective nuclear charge for ``(n, s)``
      :param method: Method to calculate the screening constant, the choices are
                     - `slater`, for Slater's method as in Slater, J. C. (1930).
                         Atomic Shielding Constants. Physical Review, 36(1), 57–64.
                         `doi:10.1103/PhysRev.36.57 <https://www.dx.doi.org/10.1103/PhysRev.36.57>`_
                     - `clementi` for values of screening constants from Clementi, E.,
                         & Raimondi, D. L. (1963). Atomic Screening Constants from SCF
                         Functions. The Journal of Chemical Physics, 38(11), 2686.
                         `doi:10.1063/1.1733573 <https://www.dx.doi.org/10.1063/1.1733573>`_
                         and Clementi, E. (1967). Atomic Screening Constants from SCF
                         Functions. II. Atoms with 37 to 86 Electrons. The Journal of
                         Chemical Physics, 47(4), 1300.
                         `doi:10.1063/1.1712084 <https://www.dx.doi.org/10.1063/1.1712084>`_
      :param n: Principal quantum number
      :param o: Orbital label, (s, p, d, ...)
      :param alle: Use all the valence electrons, i.e. calculate screening for an
                   extra electron when method='slater', if method='clementi' this
                   option is ignored


   .. py:method:: electrophilicity(self)

      Calculate electrophilicity index
      .. math::
         \\omega = \\frac{\\mu}{2\eta}


   .. py:method:: electronegativity_scales(self, name = None)

      Available electronegativity scales


   .. py:method:: electronegativity(self, scale = 'pauling', **kwargs)

      Calculate the electronegativity using one of the methods
      :param scale: Name of the electronegativity scale, one of
      :param kwargs: keyword arguments that are passed to compute a specific electronegativity


   .. py:method:: electronegativity_allen(self)

      Allen's electronegativity


   .. py:method:: electronegativity_allred_rochow(self, radius='covalent_radius_pyykko')

      Allred-Rochow's electronegativity


   .. py:method:: electronegativity_cottrell_sutton(self, radius='covalent_radius_pyykko')

      Cottrell-Sutton's electronegativity


   .. py:method:: electronegativity_gordy(self, radius='covalent_radius_pyykko')

      Gordy's electronegativity


   .. py:method:: electronegativity_ghosh(self)

      Ghosh's electronegativity


   .. py:method:: electronegativity_li_xue(self, charge = 1, radius = 'crystal_radius')

      Calculate the electronegativity of an atom according to the definition
      of Li and Xue
      :param charge: charge of the ion
      :param radius: type of radius to be used in the calculation, either
                     `crystal_radius` as recommended in the paper or `ionic_radius`

      :returns:

                dictionary with electronegativities as values and
                    coordination string as keys or tuple of coordination and spin
                    if the ion is LS or HS
      :rtype: out (dict)


   .. py:method:: electronegativity_martynov_batsanov(self)

      Calculates the electronegativity value according to Martynov and
      Batsanov as the average of the ionization energies of the valence
      electrons
      .. math::
         \chi_{MB} = \sqrt{\\frac{1}{n_{v}}\sum^{n_{v}}_{k=1} I_{k}}
      where:
      - :math:`n_{v}` is the number of valence electrons
      - :math:`I_{k}` is the :math:`k` th ionization potential.


   .. py:method:: electronegativity_mulliken(self, charge = 0, missing_is_zero = False, allow_negative_ea = False)

      Return the absolute electronegativity (Mulliken scale), calculated as
      :param charge: charge of the ion
      :param missing_is_zero: missing values are substituted with zero
      :param allow_negative_ea: if `True` negative EA values will be allowed

      .. math::
         \chi = \\frac{I + A}{2}
      where :math:`I` is the ionization energy and :math:`A` is the electron
      affinity


   .. py:method:: electronegativity_nagle(self)

      Nagle's electronegativity


   .. py:method:: electronegativity_pauling(self)

      Pauling's electronegativity


   .. py:method:: nvalence(self, method=None)

      Return the number of valence electrons


   .. py:method:: oxides(self)

      Return a lsit of possible oxides based on the oxidation number


   .. py:method:: __str__(self)


   .. py:method:: __repr__(self)



.. py:class:: IonicRadius

   Bases: :py:obj:`Base`

   Effective ionic radii and crystal radii in pm retrieved from [1]_.
   .. [1] Shannon, R. D. (1976). Revised effective ionic radii and systematic
      studies of interatomic distances in halides and chalcogenides. Acta
      Crystallographica Section A.
      `doi:10.1107/S0567739476001551 <https://www.dx.doi.org/10.1107/S0567739476001551>`_
   :param atomic_number: Atomic number
   :type atomic_number: int
   :param charge: Charge of the ion
   :type charge: int
   :param econf: Electronic configuration of the ion
   :type econf: str
   :param coordination: Type of coordination
   :type coordination: str
   :param spin: Spin state: HS - high spin, LS - low spin
   :type spin: str
   :param crystal_radius: Crystal radius in pm
   :type crystal_radius: float
   :param ionic_radius: Ionic radius in pm
   :type ionic_radius: float
   :param origin: Source of the data
   :type origin: str
   :param most_reliable: Most reliable value (see reference)
   :type most_reliable: bool

   .. py:attribute:: __tablename__
      :annotation: = ionicradii

      

   .. py:attribute:: id
      

      

   .. py:attribute:: atomic_number
      

      

   .. py:attribute:: charge
      

      

   .. py:attribute:: econf
      

      

   .. py:attribute:: coordination
      

      

   .. py:attribute:: spin
      

      

   .. py:attribute:: crystal_radius
      

      

   .. py:attribute:: ionic_radius
      

      

   .. py:attribute:: origin
      

      

   .. py:attribute:: most_reliable
      

      

   .. py:method:: __str__(self)


   .. py:method:: __repr__(self)



.. py:class:: IonizationEnergy

   Bases: :py:obj:`Base`

   Ionization energy of an element
   :param atomic_number: Atomic number
   :type atomic_number: int
   :param degree: Degree of ionization with respect to neutral atom
   :type degree: int
   :param energy: Ionization energy in eV parsed from
                  https://physics.nist.gov/cgi-bin/ASD/ie.pl on April 13, 2015
   :type energy: float

   .. py:attribute:: __tablename__
      :annotation: = ionizationenergies

      

   .. py:attribute:: id
      

      

   .. py:attribute:: atomic_number
      

      

   .. py:attribute:: degree
      

      

   .. py:attribute:: energy
      

      

   .. py:method:: __str__(self)


   .. py:method:: __repr__(self)



.. py:class:: OxidationState

   Bases: :py:obj:`Base`

   Oxidation states of an element
   :param atomic_number: Atomic number
   :type atomic_number: int
   :param oxidation_state: Oxidation state
   :type oxidation_state: int

   .. py:attribute:: __tablename__
      :annotation: = oxidationstates

      

   .. py:attribute:: id
      

      

   .. py:attribute:: atomic_number
      

      

   .. py:attribute:: oxidation_state
      

      

   .. py:method:: __repr__(self)



.. py:class:: Series

   Bases: :py:obj:`Base`

   Name of the series in the periodic table.
   :param name: Name of the series
   :type name: str
   :param color: The HEX representation of a color of the series, the colors were
                 obtained from `ColorBrewer <https://colorbrewer2.org/?type=qualitative&scheme=Paired&n=10>`_
                 the qualitative 10-class paired colormap
   :type color: str

   .. py:attribute:: __tablename__
      :annotation: = series

      

   .. py:attribute:: id
      

      

   .. py:attribute:: name
      

      

   .. py:attribute:: color
      

      

   .. py:method:: __repr__(self)



.. py:class:: Isotope

   Bases: :py:obj:`Base`

   Isotope
   :param abundance: Abundance of the isotope
   :type abundance: float
   :param atomic_number: Atomic number
   :type atomic_number: int
   :param half_life: Half life time
   :type half_life: float
   :param half_life_unit: Unit for the half life time
   :type half_life_unit: str
   :param is_radioactive: A flag marking wheather the isotope is radioactive
   :type is_radioactive: bool
   :param mass: Mass of the isotope
   :type mass: float
   :param mass_number: Mass number of the isotope
   :type mass_number: int
   :param mass_uncertainty: Uncertainty of the mass value
   :type mass_uncertainty: float

   .. py:attribute:: __tablename__
      :annotation: = isotopes

      

   .. py:attribute:: id
      

      

   .. py:attribute:: abundance
      

      

   .. py:attribute:: atomic_number
      

      

   .. py:attribute:: g_factor
      

      

   .. py:attribute:: half_life
      

      

   .. py:attribute:: half_life_unit
      

      

   .. py:attribute:: is_radioactive
      

      

   .. py:attribute:: mass
      

      

   .. py:attribute:: mass_number
      

      

   .. py:attribute:: mass_uncertainty
      

      

   .. py:attribute:: spin
      

      

   .. py:attribute:: quadrupole_moment
      

      

   .. py:method:: __str__(self)


   .. py:method:: __repr__(self)



.. py:class:: ScreeningConstant

   Bases: :py:obj:`Base`

   Nuclear screening constants from Clementi, E., & Raimondi, D. L. (1963).
   Atomic Screening Constants from SCF Functions. The Journal of Chemical
   Physics, 38(11), 2686.  `doi:10.1063/1.1733573
   <https://www.dx.doi.org/10.1063/1.1733573>`_ and Clementi, E. (1967). Atomic
   Screening Constants from SCF Functions. II. Atoms with 37 to 86 Electrons.
   The Journal of Chemical Physics, 47(4), 1300.  `doi:10.1063/1.1712084
   <https://www.dx.doi.org/10.1063/1.1712084>`_
   Args::
       atomic_number (int): Atomic number
       n (int): Principal quantum number
       s (str): Subshell label, (s, p, d, ...)
       screening (float): Screening constant

   .. py:attribute:: __tablename__
      :annotation: = screeningconstants

      

   .. py:attribute:: id
      

      

   .. py:attribute:: atomic_number
      

      

   .. py:attribute:: n
      

      

   .. py:attribute:: s
      

      

   .. py:attribute:: screening
      

      

   .. py:method:: __str__(self)


   .. py:method:: __repr__(self)



