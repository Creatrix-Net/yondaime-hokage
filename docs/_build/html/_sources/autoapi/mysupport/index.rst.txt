:py:mod:`mysupport`
===================

.. py:module:: mysupport


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   mysupport.MySupport



Functions
~~~~~~~~~

.. autoapisummary::

   mysupport.setup



.. py:class:: MySupport(bot)

   Bases: :py:obj:`discord.ext.commands.Cog`

   The base class that all cogs must inherit from.

   A cog is a collection of commands, listeners, and optional state to
   help group commands together. More information on them can be found on
   the :ref:`ext_commands_cogs` page.

   When inheriting from this class, the options shown in :class:`CogMeta`
   are equally valid here.

   .. py:method:: display_emoji(self)
      :property:


   .. py:method:: vote(self, ctx)
      :async:

      Get all the voting links


   .. py:method:: format_commit(commit)
      :staticmethod:


   .. py:method:: get_last_commits(self, count=3)


   .. py:method:: about(self, ctx)
      :async:

      Tells you information about the bot itself.


   .. py:method:: inviteme(self, ctx)
      :async:

      Generates my invite link for your server


   .. py:method:: supportserver(self, ctx)
      :async:

      Generates my support server invite


   .. py:method:: privacy(self, ctx)
      :async:

      Get the Privacy Policy


   .. py:method:: ping(self, ctx)
      :async:

      Get the Latency


   .. py:method:: source(self, ctx, *, command = None)
      :async:

      Displays my full source code or for a specific command.
      To display the source code of a subcommand you can separate it by
      periods, e.g. tag.create for the create subcommand of the tag command
      or by spaces.



.. py:function:: setup(bot)


