:py:mod:`lib.util.privacy_vote`
===============================

.. py:module:: lib.util.privacy_vote


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   lib.util.privacy_vote.VotingMenu
   lib.util.privacy_vote.PrivacyPolicy
   lib.util.privacy_vote.MenuSource




.. py:class:: VotingMenu(bot)

   Bases: :py:obj:`discord.ext.menus.Menu`

   An interface that allows handling menus by using reactions as buttons.

   Buttons should be marked with the :func:`button` decorator. Please note that
   this expects the methods to have a single parameter, the ``payload``. This
   ``payload`` is of type :class:`discord.RawReactionActionEvent`.

   .. attribute:: timeout

      The timeout to wait between button inputs.

      :type: :class:`float`

   .. attribute:: delete_message_after

      Whether to delete the message after the menu interaction is done.

      :type: :class:`bool`

   .. attribute:: clear_reactions_after

      Whether to clear reactions after the menu interaction is done.
      Note that :attr:`delete_message_after` takes priority over this attribute.
      If the bot does not have permissions to clear the reactions then it will
      delete the reactions one by one.

      :type: :class:`bool`

   .. attribute:: check_embeds

      Whether to verify embed permissions as well.

      :type: :class:`bool`

   .. attribute:: ctx

      The context that started this pagination session or ``None`` if it hasn't
      been started yet.

      :type: Optional[:class:`commands.Context`]

   .. attribute:: bot

      The bot that is running this pagination session or ``None`` if it hasn't
      been started yet.

      :type: Optional[:class:`commands.Bot`]

   .. attribute:: message

      The message that has been sent for handling the menu. This is the returned
      message of :meth:`send_initial_message`. You can set it in order to avoid
      calling :meth:`send_initial_message`\, if for example you have a pre-existing
      message you want to attach a menu to.

      :type: Optional[:class:`discord.Message`]

   .. py:method:: send_initial_message(self, ctx, channel)
      :async:

      |coro|

      Sends the initial message for the menu session.

      This is internally assigned to the :attr:`message` attribute.

      Subclasses must implement this if they don't set the
      :attr:`message` attribute themselves before starting the
      menu via :meth:`start`.

      :param ctx: The invocation context to use.
      :type ctx: :class:`Context`
      :param channel: The messageable to send the message to.
      :type channel: :class:`discord.abc.Messageable`

      :returns: The message that has been sent.
      :rtype: :class:`discord.Message`


   .. py:method:: on_check_mark(self, payload)
      :async:


   .. py:method:: on_stop(self, payload)
      :async:



.. py:class:: PrivacyPolicy(bot)

   Bases: :py:obj:`discord.ext.menus.Menu`

   An interface that allows handling menus by using reactions as buttons.

   Buttons should be marked with the :func:`button` decorator. Please note that
   this expects the methods to have a single parameter, the ``payload``. This
   ``payload`` is of type :class:`discord.RawReactionActionEvent`.

   .. attribute:: timeout

      The timeout to wait between button inputs.

      :type: :class:`float`

   .. attribute:: delete_message_after

      Whether to delete the message after the menu interaction is done.

      :type: :class:`bool`

   .. attribute:: clear_reactions_after

      Whether to clear reactions after the menu interaction is done.
      Note that :attr:`delete_message_after` takes priority over this attribute.
      If the bot does not have permissions to clear the reactions then it will
      delete the reactions one by one.

      :type: :class:`bool`

   .. attribute:: check_embeds

      Whether to verify embed permissions as well.

      :type: :class:`bool`

   .. attribute:: ctx

      The context that started this pagination session or ``None`` if it hasn't
      been started yet.

      :type: Optional[:class:`commands.Context`]

   .. attribute:: bot

      The bot that is running this pagination session or ``None`` if it hasn't
      been started yet.

      :type: Optional[:class:`commands.Bot`]

   .. attribute:: message

      The message that has been sent for handling the menu. This is the returned
      message of :meth:`send_initial_message`. You can set it in order to avoid
      calling :meth:`send_initial_message`\, if for example you have a pre-existing
      message you want to attach a menu to.

      :type: Optional[:class:`discord.Message`]

   .. py:method:: send_initial_message(self, ctx, channel)
      :async:

      |coro|

      Sends the initial message for the menu session.

      This is internally assigned to the :attr:`message` attribute.

      Subclasses must implement this if they don't set the
      :attr:`message` attribute themselves before starting the
      menu via :meth:`start`.

      :param ctx: The invocation context to use.
      :type ctx: :class:`Context`
      :param channel: The messageable to send the message to.
      :type channel: :class:`discord.abc.Messageable`

      :returns: The message that has been sent.
      :rtype: :class:`discord.Message`


   .. py:method:: on_add(self, payload)
      :async:


   .. py:method:: on_stop(self, payload)
      :async:



.. py:class:: MenuSource(data)

   Bases: :py:obj:`discord.ext.menus.ListPageSource`

   A data source for a sequence of items.

   This page source does not handle any sort of formatting, leaving it up
   to the user. To do so, implement the :meth:`format_page` method.

   .. attribute:: entries

      The sequence of items to paginate.

      :type: Sequence[Any]

   .. attribute:: per_page

      How many elements are in a page.

      :type: :class:`int`

   .. py:method:: format_page(self, menu, data)
      :async:

      |maybecoro|

      An abstract method to format the page.

      This method must return one of the following types.

      If this method returns a ``str`` then it is interpreted as returning
      the ``content`` keyword argument in :meth:`discord.Message.edit`
      and :meth:`discord.abc.Messageable.send`.

      If this method returns a :class:`discord.Embed` then it is interpreted
      as returning the ``embed`` keyword argument in :meth:`discord.Message.edit`
      and :meth:`discord.abc.Messageable.send`.

      If this method returns a ``dict`` then it is interpreted as the
      keyword-arguments that are used in both :meth:`discord.Message.edit`
      and :meth:`discord.abc.Messageable.send`. The two of interest are
      ``embed`` and ``content``.

      :param menu: The menu that wants to format this page.
      :type menu: :class:`Menu`
      :param page: The page returned by :meth:`PageSource.get_page`.
      :type page: Any

      :returns: See above.
      :rtype: Union[:class:`str`, :class:`discord.Embed`, :class:`dict`]



