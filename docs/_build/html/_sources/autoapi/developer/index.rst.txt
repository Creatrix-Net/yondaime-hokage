:py:mod:`developer`
===================

.. py:module:: developer


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   developer.FeedbackModal
   developer.Feedback
   developer.Blacklist
   developer.User
   developer.Server
   developer.Fetch
   developer.Delete
   developer.Commands
   developer.DeveloperCog



Functions
~~~~~~~~~

.. autoapisummary::

   developer.setup



Attributes
~~~~~~~~~~

.. autoapisummary::

   developer.log
   developer.ch
   developer.formatter


.. py:data:: log
   

   

.. py:data:: ch
   

   

.. py:data:: formatter
   

   

.. py:class:: FeedbackModal

   Bases: :py:obj:`discord.ui.Modal`

   Represents a UI modal.

   This object must be inherited to create a modal popup window within discord.

   .. versionadded:: 2.0

   .. rubric:: Examples

   .. code-block:: python3

       from discord import ui

       class Questionnaire(ui.Modal, title='Questionnaire Response'):
           name = ui.TextInput(label='Name')
           answer = ui.TextInput(label='Answer', style=discord.TextStyle.paragraph)

           async def on_submit(self, interaction: discord.Interaction):
               await interaction.response.send_message(f'Thanks for your response, {self.name}!', ephemeral=True)

   :param title: The title of the modal. Can only be up to 45 characters.
   :type title: :class:`str`
   :param timeout: Timeout in seconds from last interaction with the UI before no longer accepting input.
                   If ``None`` then there is no timeout.
   :type timeout: Optional[:class:`float`]
   :param custom_id: The ID of the modal that gets received during an interaction.
                     If not given then one is generated for you.
                     Can only be up to 100 characters.
   :type custom_id: :class:`str`

   .. attribute:: title

      The title of the modal.

      :type: :class:`str`

   .. attribute:: custom_id

      The ID of the modal that gets received during an interaction.

      :type: :class:`str`

   .. py:attribute:: children
      :annotation: :List[discord.ui.InputText]

      

   .. py:method:: callback(self, interaction)
      :async:



.. py:class:: Feedback(cog)

   Bases: :py:obj:`discord.SlashCommand`

   Send feedback, suggestion or report regarding me to my developer

   .. py:method:: callback(self, response)
      :async:



.. py:class:: Blacklist(cog)

   Bases: :py:obj:`discord.SlashCommand`

   Some blacklist releated secret commands

   .. py:method:: command_check(self, response)
      :async:



.. py:class:: User

   Bases: :py:obj:`discord.SlashCommand`

   Adds user to the blacklist

   .. py:attribute:: id
      :annotation: :str

      

   .. py:attribute:: reason
      :annotation: :Optional[str]

      

   .. py:method:: callback(self, response)
      :async:



.. py:class:: Server

   Bases: :py:obj:`discord.SlashCommand`

   Adds guild to the blacklist

   .. py:attribute:: id
      :annotation: :str

      

   .. py:attribute:: reason
      :annotation: :Optional[str]

      

   .. py:method:: callback(self, response)
      :async:



.. py:class:: Fetch

   Bases: :py:obj:`discord.SlashCommand`

   Fetches data from the blacklist list of users and server

   .. py:attribute:: id
      :annotation: :str

      

   .. py:method:: callback(self, response)
      :async:



.. py:class:: Delete

   Bases: :py:obj:`discord.SlashCommand`

   Delete the data if found blacklist list

   .. py:attribute:: id
      :annotation: :str

      

   .. py:method:: callback(self, response)
      :async:



.. py:class:: Commands(cog)

   Bases: :py:obj:`discord.SlashCommand`

   Some bot commands releated secret commands

   .. py:method:: command_check(self, response)
      :async:


   .. py:method:: callback(self, response)
      :async:



.. py:class:: DeveloperCog(bot)

   Bases: :py:obj:`discord.Cog`

   .. py:method:: database_class_user(self)
      :async:


   .. py:method:: database_class_server(self)
      :async:



.. py:function:: setup(bot)


