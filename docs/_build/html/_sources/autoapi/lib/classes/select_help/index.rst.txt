:py:mod:`lib.classes.select_help`
=================================

.. py:module:: lib.classes.select_help

.. autoapi-nested-parse::

   This code has been fully copied from here https://github.com/Rapptz/RoboDanny/blob/rewrite/cogs/utils/paginator.py



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   lib.classes.select_help.GroupHelpPageSource
   lib.classes.select_help.HelpSelectMenu
   lib.classes.select_help.FrontPageSource
   lib.classes.select_help.HelpMenu
   lib.classes.select_help.PaginatedHelpCommand



Functions
~~~~~~~~~

.. autoapisummary::

   lib.classes.select_help.chunks



.. py:function:: chunks(data, SIZE = DEFAULT_COMMAND_SELECT_LENGTH)


.. py:class:: GroupHelpPageSource(group, commands, *, prefix)

   Bases: :py:obj:`DiscordUtils.paginator.menus.ListPageSource`

   A data source for a sequence of items.

   This page source does not handle any sort of formatting, leaving it up
   to the user. To do so, implement the :meth:`format_page` method.

   .. attribute:: entries

      The sequence of items to paginate.

      :type: Sequence[Any]

   .. attribute:: per_page

      How many elements are in a page.

      :type: :class:`int`

   .. py:method:: format_page(self, menu, commands)
      :async:

      |maybecoro|

      An abstract method to format the page.

      This method must return one of the following types.

      If this method returns a ``str`` then it is interpreted as returning
      the ``content`` keyword argument in :meth:`discord.Message.edit`
      and :meth:`discord.abc.Messageable.send`.

      If this method returns a :class:`discord.Embed` then it is interpreted
      as returning the ``embed`` keyword argument in :meth:`discord.Message.edit`
      and :meth:`discord.abc.Messageable.send`.

      If this method returns a ``dict`` then it is interpreted as the
      keyword-arguments that are used in both :meth:`discord.Message.edit`
      and :meth:`discord.abc.Messageable.send`. The two of interest are
      ``embed`` and ``content``.

      :param menu: The menu that wants to format this page.
      :type menu: :class:`Menu`
      :param page: The page returned by :meth:`PageSource.get_page`.
      :type page: Any

      :returns: See above.
      :rtype: Union[:class:`str`, :class:`discord.Embed`, :class:`dict`]



.. py:class:: HelpSelectMenu(commands, bot)

   Bases: :py:obj:`DiscordUtils.paginator.discord.ui.Select`\ [\ :py:obj:`HelpMenu`\ ]

   Represents a UI select menu.

   This is usually represented as a drop down menu.

   In order to get the selected items that the user has chosen, use :attr:`Select.values`.

   .. versionadded:: 2.0

   :param custom_id: The ID of the select menu that gets received during an interaction.
                     If not given then one is generated for you.
   :type custom_id: :class:`str`
   :param placeholder: The placeholder text that is shown if nothing is selected, if any.
   :type placeholder: Optional[:class:`str`]
   :param min_values: The minimum number of items that must be chosen for this select menu.
                      Defaults to 1 and must be between 1 and 25.
   :type min_values: :class:`int`
   :param max_values: The maximum number of items that must be chosen for this select menu.
                      Defaults to 1 and must be between 1 and 25.
   :type max_values: :class:`int`
   :param options: A list of options that can be selected in this menu.
   :type options: List[:class:`discord.SelectOption`]
   :param disabled: Whether the select is disabled or not.
   :type disabled: :class:`bool`
   :param row: The relative row this select menu belongs to. A Discord component can only have 5
               rows. By default, items are arranged automatically into those 5 rows. If you'd
               like to control the relative positioning of the row then passing an index is advised.
               For example, row=1 will show up before row=2. Defaults to ``None``, which is automatic
               ordering. The row number must be between 0 and 4 (i.e. zero indexed).
   :type row: Optional[:class:`int`]

   .. py:method:: __fill_options(self)


   .. py:method:: callback(self, interaction)
      :async:

      |coro|

      The callback associated with this UI item.

      This can be overridden by subclasses.

      :param interaction: The interaction that triggered this UI item.
      :type interaction: :class:`.Interaction`



.. py:class:: FrontPageSource

   Bases: :py:obj:`DiscordUtils.paginator.menus.PageSource`

   An interface representing a menu page's data source for the actual menu page.

   Subclasses must implement the backing resource along with the following methods:

   - :meth:`get_page`
   - :meth:`is_paginating`
   - :meth:`format_page`

   .. py:method:: is_paginating(self)

      An abstract method that notifies the :class:`MenuPages` whether or not
      to start paginating. This signals whether to add reactions or not.

      Subclasses must implement this.

      :returns: Whether to trigger pagination.
      :rtype: :class:`bool`


   .. py:method:: get_max_pages(self)

      An optional abstract method that retrieves the maximum number of pages
      this page source has. Useful for UX purposes.

      The default implementation returns ``None``.

      :returns: The maximum number of pages required to properly
                paginate the elements, if given.
      :rtype: Optional[:class:`int`]


   .. py:method:: get_page(self, page_number)
      :async:

      |coro|

      An abstract method that retrieves an object representing the object to format.

      Subclasses must implement this.

      .. note::

          The page_number is zero-indexed between [0, :meth:`get_max_pages`),
          if there is a maximum number of pages.

      :param page_number: The page number to access.
      :type page_number: :class:`int`

      :returns: The object represented by that page.
                This is passed into :meth:`format_page`.
      :rtype: Any


   .. py:method:: format_page(self, menu, page)

      |maybecoro|

      An abstract method to format the page.

      This method must return one of the following types.

      If this method returns a ``str`` then it is interpreted as returning
      the ``content`` keyword argument in :meth:`discord.Message.edit`
      and :meth:`discord.abc.Messageable.send`.

      If this method returns a :class:`discord.Embed` then it is interpreted
      as returning the ``embed`` keyword argument in :meth:`discord.Message.edit`
      and :meth:`discord.abc.Messageable.send`.

      If this method returns a ``dict`` then it is interpreted as the
      keyword-arguments that are used in both :meth:`discord.Message.edit`
      and :meth:`discord.abc.Messageable.send`. The two of interest are
      ``embed`` and ``content``.

      :param menu: The menu that wants to format this page.
      :type menu: :class:`Menu`
      :param page: The page returned by :meth:`PageSource.get_page`.
      :type page: Any

      :returns: See above.
      :rtype: Union[:class:`str`, :class:`discord.Embed`, :class:`dict`]



.. py:class:: HelpMenu(source, ctx)

   Bases: :py:obj:`DiscordUtils.paginator.RoboPages`

   Represents a UI view.

   This object must be inherited to create a UI within Discord.

   .. versionadded:: 2.0

   :param timeout: Timeout in seconds from last interaction with the UI before no longer accepting input.
                   If ``None`` then there is no timeout.
   :type timeout: Optional[:class:`float`]

   .. py:method:: add_categories(self, commands)


   .. py:method:: rebind(self, source, interaction)
      :async:



.. py:class:: PaginatedHelpCommand

   Bases: :py:obj:`DiscordUtils.paginator.commands.HelpCommand`

   The base implementation for help command formatting.

   .. note::

       Internally instances of this class are deep copied every time
       the command itself is invoked to prevent a race condition
       mentioned in :issue:`2123`.

       This means that relying on the state of this class to be
       the same between command invocations would not work as expected.

   .. attribute:: context

      The context that invoked this help formatter. This is generally set after
      the help command assigned, :func:`command_callback`\, has been called.

      :type: Optional[:class:`Context`]

   .. attribute:: show_hidden

      Specifies if hidden commands should be shown in the output.
      Defaults to ``False``.

      :type: :class:`bool`

   .. attribute:: verify_checks

      Specifies if commands should have their :attr:`.Command.checks` called
      and verified. If ``True``, always calls :attr:`.Command.checks`.
      If ``None``, only calls :attr:`.Command.checks` in a guild setting.
      If ``False``, never calls :attr:`.Command.checks`. Defaults to ``True``.

      .. versionchanged:: 1.7

      :type: Optional[:class:`bool`]

   .. attribute:: command_attrs

      A dictionary of options to pass in for the construction of the help command.
      This allows you to change the command behaviour without actually changing
      the implementation of the command. The attributes will be the same as the
      ones passed in the :class:`.Command` constructor.

      :type: :class:`dict`

   .. py:method:: get_command_signature(self, command)

      Retrieves the signature portion of the help page.

      .. versionchanged:: 2.0

          ``command`` parameter is now positional-only.

      :param command: The command to get the signature of.
      :type command: :class:`Command`

      :returns: The signature for the command.
      :rtype: :class:`str`


   .. py:method:: send_bot_help(self, mapping)
      :async:

      |coro|

      Handles the implementation of the bot command page in the help command.
      This function is called when the help command is called with no arguments.

      It should be noted that this method does not return anything -- rather the
      actual message sending should be done inside this method. Well behaved subclasses
      should use :meth:`get_destination` to know where to send, as this is a customisation
      point for other users.

      You can override this method to customise the behaviour.

      .. note::

          You can access the invocation context with :attr:`HelpCommand.context`.

          Also, the commands in the mapping are not filtered. To do the filtering
          you will have to call :meth:`filter_commands` yourself.

      .. versionchanged:: 2.0

          ``mapping`` parameter is now positional-only.

      :param mapping: A mapping of cogs to commands that have been requested by the user for help.
                      The key of the mapping is the :class:`~.commands.Cog` that the command belongs to, or
                      ``None`` if there isn't one, and the value is a list of commands that belongs to that cog.
      :type mapping: Mapping[Optional[:class:`Cog`], List[:class:`Command`]]


   .. py:method:: send_cog_help(self, cog)
      :async:

      |coro|

      Handles the implementation of the cog page in the help command.
      This function is called when the help command is called with a cog as the argument.

      It should be noted that this method does not return anything -- rather the
      actual message sending should be done inside this method. Well behaved subclasses
      should use :meth:`get_destination` to know where to send, as this is a customisation
      point for other users.

      You can override this method to customise the behaviour.

      .. note::

          You can access the invocation context with :attr:`HelpCommand.context`.

          To get the commands that belong to this cog see :meth:`Cog.get_commands`.
          The commands returned not filtered. To do the filtering you will have to call
          :meth:`filter_commands` yourself.

      .. versionchanged:: 2.0

          ``cog`` parameter is now positional-only.

      :param cog: The cog that was requested for help.
      :type cog: :class:`Cog`


   .. py:method:: common_command_formatting(self, embed_like, command)


   .. py:method:: send_command_help(self, command)
      :async:

      |coro|

      Handles the implementation of the single command page in the help command.

      It should be noted that this method does not return anything -- rather the
      actual message sending should be done inside this method. Well behaved subclasses
      should use :meth:`get_destination` to know where to send, as this is a customisation
      point for other users.

      You can override this method to customise the behaviour.

      .. note::

          You can access the invocation context with :attr:`HelpCommand.context`.

      .. admonition:: Showing Help
          :class: helpful

          There are certain attributes and methods that are helpful for a help command
          to show such as the following:

          - :attr:`Command.help`
          - :attr:`Command.brief`
          - :attr:`Command.short_doc`
          - :attr:`Command.description`
          - :meth:`get_command_signature`

          There are more than just these attributes but feel free to play around with
          these to help you get started to get the output that you want.

      .. versionchanged:: 2.0

          ``command`` parameter is now positional-only.

      :param command: The command that was requested for help.
      :type command: :class:`Command`


   .. py:method:: send_group_help(self, group)
      :async:

      |coro|

      Handles the implementation of the group page in the help command.
      This function is called when the help command is called with a group as the argument.

      It should be noted that this method does not return anything -- rather the
      actual message sending should be done inside this method. Well behaved subclasses
      should use :meth:`get_destination` to know where to send, as this is a customisation
      point for other users.

      You can override this method to customise the behaviour.

      .. note::

          You can access the invocation context with :attr:`HelpCommand.context`.

          To get the commands that belong to this group without aliases see
          :attr:`Group.commands`. The commands returned not filtered. To do the
          filtering you will have to call :meth:`filter_commands` yourself.

      .. versionchanged:: 2.0

          ``group`` parameter is now positional-only.

      :param group: The group that was requested for help.
      :type group: :class:`Group`



