:py:mod:`lib.database.backup`
=============================

.. py:module:: lib.database.backup


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   lib.database.backup.BackupDatabse




.. py:class:: BackupDatabse(ctx)

   The database class to handle the backup commands


   .. py:method:: create_backup(self)
      :async:

      |coro|
      It creates the backup of the server

      :return: The backup code
      :rtype: int


   .. py:method:: get_backup_data(self, code)
      :async:

      |coro|
      It returns the backup of the specified server

      :param code: The message containing that backup
      :type code: int
      :return: The json file which has the backup
      :rtype: Optional[discord.Attachment]


   .. py:method:: delete_backup_data(self, code)
      :async:

      |coro|
      Deletes the backup data against the specified code

      :param code: The backup code to delete
      :type code: int


   .. py:method:: apply_backup(self, code)
      :async:

      |coro|
      It applied backup with the backup code specified

      :param code:Backup Code
      :type code: int
      :return: :class:`str` is returned when there is a error otherwise a :class:`bool` with True value
      :rtype: Optional[Union[str, bool]]


   .. py:method:: return_category_channel(self, name)
      :async:

      It returns the category channel from the category name

      :param name: Category channel name
      :type name: str
      :return: See Above
      :rtype: Optional[discord.CategoryChannel]


   .. py:method:: return_role_overwrites(self, data)
      :async:

      Return the role overwrites dict with proper formatting

      :param data: Dict containing the role overwrites data
      :type data: dict
      :return: Role Overwrites with the proper formatting
      :rtype: dict


   .. py:method:: reason(code, author = None)
      :staticmethod:

      It generates the mod reason

      :param code: The backup code
      :type code: int
      :param author: The author who is using the backup, defaults to None
      :type author: Optional[Union[discord.Member, discord.User]], optional
      :return: The reason to be given in the `reason` parameter
      :rtype: str



