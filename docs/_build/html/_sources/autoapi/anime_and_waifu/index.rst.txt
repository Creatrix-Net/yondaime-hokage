:py:mod:`anime_and_waifu`
=========================

.. py:module:: anime_and_waifu


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   anime_and_waifu.AnimeaMangaandWaifu



Functions
~~~~~~~~~

.. autoapisummary::

   anime_and_waifu.format_related_anime_manga
   anime_and_waifu.format_staff
   anime_and_waifu.format_characters
   anime_and_waifu.format_manga_characters
   anime_and_waifu.setup



.. py:function:: format_related_anime_manga(dict_related_anime)

   Properly formats the related anime and manga list

   :param dict_related_anime: The list you got it from the module
   :type dict_related_anime: Dict[str, List[str]]
   :return: The formatted string to put in the embed
   :rtype: str


.. py:function:: format_staff(staff)

   Properly formats the staff list

   :param staff: The list you got it from the module
   :type staff: List[AnimeStaffResult]
   :return: The formatted string to put in the embed
   :rtype: str


.. py:function:: format_characters(character)

   Properly formats the characters list

   :param character: The list you got it from the module
   :type character: List[AnimeCharacterResult]
   :return: The formatted string to put in the embed
   :rtype: str


.. py:function:: format_manga_characters(character)

   Properly formats the manga characters list

   :param character: The list you got it from the module
   :type character: List[MangaCharacterResult]
   :return: The formatted string to put in the embed
   :rtype: str


.. py:class:: AnimeaMangaandWaifu(bot)

   Bases: :py:obj:`discord.ext.commands.Cog`

   The base class that all cogs must inherit from.

   A cog is a collection of commands, listeners, and optional state to
   help group commands together. More information on them can be found on
   the :ref:`ext_commands_cogs` page.

   When inheriting from this class, the options shown in :class:`CogMeta`
   are equally valid here.

   .. py:method:: display_emoji(self)
      :property:


   .. py:method:: get_waifu(self)
      :async:

      Returns a random waifu from the api

      :return: tuple of (Embed, name)
      :rtype: Tuple[Embed, str]


   .. py:method:: animesearch(self, ctx, *, anime_name)
      :async:

      Searches Anime from MAL and displays the first 10 search result.


   .. py:method:: aboutanime(self, ctx, mal_id)
      :async:

      Displays about the anime using the MAL ANIME ID. get it by using animesearch command.


   .. py:method:: mangasearch(self, ctx, *, manga_name)
      :async:

      Searches Manga from MAL and displays the first 10 search result.


   .. py:method:: aboutmanga(self, ctx, mal_id)
      :async:

      Displays about the manga using the MAL MANGA ID. get it by using mangasearch command.


   .. py:method:: waifu(self, ctx)
      :async:

      Get random waifu and marry them! UwU!


   .. py:method:: whosthatpokemon(self, ctx)
      :async:

      Play Who's That Pokemon?



.. py:function:: setup(bot)


