:py:mod:`lib.util.context`
==========================

.. py:module:: lib.util.context


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   lib.util.context.ConfirmationView
   lib.util.context.Context




.. py:class:: ConfirmationView(*, timeout, author_id, ctx, delete_after)

   Bases: :py:obj:`discord.ui.View`

   Represents a UI view.

   This object must be inherited to create a UI within Discord.

   .. versionadded:: 2.0

   :param timeout: Timeout in seconds from last interaction with the UI before no longer accepting input.
                   If ``None`` then there is no timeout.
   :type timeout: Optional[:class:`float`]

   .. py:method:: interaction_check(self, interaction)
      :async:

      |coro|

      A callback that is called when an interaction happens within the view
      that checks whether the view should process item callbacks for the interaction.

      This is useful to override if, for example, you want to ensure that the
      interaction author is a given user.

      The default implementation of this returns ``True``.

      .. note::

          If an exception occurs within the body then the check
          is considered a failure and :meth:`on_error` is called.

      :param interaction: The interaction that occurred.
      :type interaction: :class:`~discord.Interaction`

      :returns: Whether the view children's callbacks should be called.
      :rtype: :class:`bool`


   .. py:method:: on_timeout(self)
      :async:

      |coro|

      A callback that is called when a view's timeout elapses without being explicitly stopped.


   .. py:method:: confirm(self, button, interaction)
      :async:


   .. py:method:: cancel(self, button, interaction)
      :async:



.. py:class:: Context(*, message, bot, view, args = MISSING, kwargs = MISSING, prefix = None, command = None, invoked_with = None, invoked_parents = MISSING, invoked_subcommand = None, subcommand_passed = None, command_failed = False, current_parameter = None, current_argument = None, interaction = None)

   Bases: :py:obj:`discord.ext.commands.Context`

   Represents the context in which a command is being invoked under.

   This class contains a lot of meta data to help you understand more about
   the invocation context. This class is not created manually and is instead
   passed around to commands as the first parameter.

   This class implements the :class:`~discord.abc.Messageable` ABC.

   .. attribute:: message

      The message that triggered the command being executed.

      .. note::

          In the case of an interaction based context, this message is "synthetic"
          and does not actually exist. Therefore, the ID on it is invalid similar
          to ephemeral messages.

      :type: :class:`.Message`

   .. attribute:: bot

      The bot that contains the command being executed.

      :type: :class:`.Bot`

   .. attribute:: args

      The list of transformed arguments that were passed into the command.
      If this is accessed during the :func:`.on_command_error` event
      then this list could be incomplete.

      :type: :class:`list`

   .. attribute:: kwargs

      A dictionary of transformed arguments that were passed into the command.
      Similar to :attr:`args`\, if this is accessed in the
      :func:`.on_command_error` event then this dict could be incomplete.

      :type: :class:`dict`

   .. attribute:: current_parameter

      The parameter that is currently being inspected and converted.
      This is only of use for within converters.

      .. versionadded:: 2.0

      :type: Optional[:class:`Parameter`]

   .. attribute:: current_argument

      The argument string of the :attr:`current_parameter` that is currently being converted.
      This is only of use for within converters.

      .. versionadded:: 2.0

      :type: Optional[:class:`str`]

   .. attribute:: interaction

      The interaction associated with this context.

      .. versionadded:: 2.0

      :type: Optional[:class:`~discord.Interaction`]

   .. attribute:: prefix

      The prefix that was used to invoke the command. For interaction based contexts,
      this is ``/`` for slash commands and ``\u200b`` for context menu commands.

      :type: Optional[:class:`str`]

   .. attribute:: command

      The command that is being invoked currently.

      :type: Optional[:class:`Command`]

   .. attribute:: invoked_with

      The command name that triggered this invocation. Useful for finding out
      which alias called the command.

      :type: Optional[:class:`str`]

   .. attribute:: invoked_parents

      The command names of the parents that triggered this invocation. Useful for
      finding out which aliases called the command.

      For example in commands ``?a b c test``, the invoked parents are ``['a', 'b', 'c']``.

      .. versionadded:: 1.7

      :type: List[:class:`str`]

   .. attribute:: invoked_subcommand

      The subcommand that was invoked.
      If no valid subcommand was invoked then this is equal to ``None``.

      :type: Optional[:class:`Command`]

   .. attribute:: subcommand_passed

      The string that was attempted to call a subcommand. This does not have
      to point to a valid registered subcommand and could just point to a
      nonsense string. If nothing was passed to attempt a call to a
      subcommand then this is set to ``None``.

      :type: Optional[:class:`str`]

   .. attribute:: command_failed

      A boolean that indicates if the command failed to be parsed, checked,
      or invoked.

      :type: :class:`bool`

   .. py:method:: entry_to_code(self, entries)
      :async:


   .. py:method:: indented_entry_to_code(self, entries)
      :async:


   .. py:method:: __repr__(self)

      Return repr(self).


   .. py:method:: session(self)
      :property:


   .. py:method:: replied_reference(self)


   .. py:method:: disambiguate(self, matches, entry)
      :async:


   .. py:method:: prompt(self, message, *, timeout = 60.0, delete_after = True, author_id = None)
      :async:

      An interactive reaction confirmation dialog.
      :param message: The message to show along with the prompt.
      :type message: str
      :param timeout: How long to wait before returning.
      :type timeout: float
      :param delete_after: Whether to delete the confirmation message after we're done.
      :type delete_after: bool
      :param author_id: The member who should respond to the prompt. Defaults to the author of the
                        Context's message.
      :type author_id: Optional[int]

      :returns: ``True`` if explicit confirm,
                ``False`` if explicit deny,
                ``None`` if deny due to timeout
      :rtype: Optional[bool]


   .. py:method:: show_help(self, command=None)
      :async:

      Shows the help command for the specified command if given.
      If no command is given, then it'll show help for the current
      command.


   .. py:method:: safe_send(self, content, *, escape_mentions=True, **kwargs)
      :async:

      Same as send except with some safe guards.
      1) If the message is too long then it sends a file with the results instead.
      2) If ``escape_mentions`` is ``True`` then it escapes mentions.


   .. py:method:: get_user(self, user)


   .. py:method:: get_dm(self, user)
      :async:


   .. py:method:: get_roles(self, role)


   .. py:method:: get_emoji(self, emoji)


   .. py:method:: get_guild(self, guild)


   .. py:method:: get_config_emoji_by_name_or_id(self, emoji)


   .. py:method:: get_config_channel_by_name_or_id(self, channel)


   .. py:method:: get_random_image_from_tag(tag_name)
      :staticmethod:


   .. py:method:: get_random_image_from_tag(tag_name)
      :staticmethod:
      :async:


   .. py:method:: tenor(tag_name)
      :staticmethod:


   .. py:method:: giphy(tag_name)
      :staticmethod:


   .. py:method:: tenor(tag_name)
      :staticmethod:
      :async:


   .. py:method:: giphy(tag_name)
      :staticmethod:
      :async:



