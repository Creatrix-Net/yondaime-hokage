:py:mod:`setup_server`
======================

.. py:module:: setup_server


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   setup_server.ServerSetup



Functions
~~~~~~~~~

.. autoapisummary::

   setup_server.setup



.. py:class:: ServerSetup(bot)

   Bases: :py:obj:`discord.ext.commands.Cog`

   The base class that all cogs must inherit from.

   A cog is a collection of commands, listeners, and optional state to
   help group commands together. More information on them can be found on
   the :ref:`ext_commands_cogs` page.

   When inheriting from this class, the options shown in :class:`CogMeta`
   are equally valid here.

   .. py:method:: display_emoji(self)
      :property:


   .. py:method:: database_class(self)
      :async:


   .. py:method:: database_class_antiraid(self)
      :async:


   .. py:method:: database_class_mentionspam(self)
      :async:


   .. py:method:: add_and_check_data(self, dict_to_add, ctx)
      :async:


   .. py:method:: cleanup(self)
      :async:


   .. py:method:: setup(self, ctx)
      :async:

      This commands setups some logging system for system for server with some nice features


   .. py:method:: add(self, ctx, add_type, channel)
      :async:

      This command adds logging of the following things in the specified text channel
      >   - ban
      >   - warns
      >   - unban
      >   - feedback

      `If the data for the any of the above is already available in database then it rewrite the data.`

      Example usage:
          ``)add ban #bans``


   .. py:method:: support(self, ctx, textchannel, support_required_role)
      :async:

      Creates a **public support system** in an interactive manner.

      :param - textchannel: A text channel where the support request will be logged.
      :param - support_required_role: A role which will be provided to the users, when a support request lodged


   .. py:method:: badlinks(self, ctx, action = None, logging_channel = None, option = True)
      :async:

      If enabled then it checks against any scam, phishing or adult links which is posted by members and take actions accordingly

      :param - action [Optional] (default: log) : What kind of action to take, It accepts the following options ; 'ban', 'mute', 'timeout', 'kick', 'log'
      :param - logging_channel [Optional]: It will log in a specific channel if specified, otherwise it will log the message where the link was sent.
      :param - option [Optional] (default: True) : It accepts the following options ; True, False, yes, no, on, off

      `Note: If 'log' action is selected then, I will only delete the message and log it the current channel where the link was sent and will do nothing`


   .. py:method:: starboard(self, ctx, channel, no_of_stars = 5, self_star = False, ignore_nsfw = True)
      :async:

      Setups the starboard in your server.
      It posts the message in the specified channel whenever someone stars a message using ‚≠ê emoji

      :param - channel: The channel where the starred message will go
      :param - no_of_stars [Optional] [int]: Minimum number of stars required before posting it to the specified channel
      :param - self_star [Optional] [bool] (default: False) : Whether self  starring of message should be there or not
      :param - ignore_nsfw [Optional] [bool] (default: True) : Whether to ignore NSFW channels or not


   .. py:method:: on_message(self, message)
      :async:


   .. py:method:: raw_data(self, ctx)
      :async:

      It returns the raw data which is stored in the database in the form of json


   .. py:method:: on_guild_remove(self, guild)
      :async:


   .. py:method:: deletedata(self, ctx, type_data = 'all')
      :async:

      This command deletes the available data:
      It accepts an optional parameter `type_data`, You can pass the following things through `type_data` parameter:

          - `ban` : Deletes the `ban data` from database
          - `unban` : Deletes the `unban data` from database
          - `support` : Deletes the `support data` from database
          - `warns` : Deletes the `warns data` from database
          - `feedback`: Deletes the `feedback data` from database
          - `mentionspam`: Deletes the `mentionspam data` from database
          - `antiraid`: Deletes the `antiraid data` from database
          - `badlinks`: Deletes the `badlinks data` from database
          - `starboard`: Deletes the `starboard data` from database

      By default the `type_data` is set to `all`, which will delete all the data present in the database.


   .. py:method:: on_raw_reaction_add(self, payload)
      :async:



.. py:function:: setup(bot)
   :async:


