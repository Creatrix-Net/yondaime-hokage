:py:mod:`music`
===============

.. py:module:: music


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   music.Music



Functions
~~~~~~~~~

.. autoapisummary::

   music.setup



.. py:class:: Music(bot)

   Bases: :py:obj:`discord.ext.commands.Cog`

   The base class that all cogs must inherit from.

   A cog is a collection of commands, listeners, and optional state to
   help group commands together. More information on them can be found on
   the :ref:`ext_commands_cogs` page.

   When inheriting from this class, the options shown in :class:`CogMeta`
   are equally valid here.

   .. py:method:: display_emoji(self)
      :property:


   .. py:method:: cog_before_invoke(self, ctx)
      :async:

      Coroutine called before command invocation.
      We mainly just want to check whether the user is in the players controller channel.


   .. py:method:: cog_command_error(self, ctx, error)
      :async:

      Cog wide error handler.


   .. py:method:: cog_check(self, ctx)
      :async:

      Cog wide check, which disallows commands in DMs.


   .. py:method:: songembed(song, queued = False)
      :staticmethod:


   .. py:method:: join(self, ctx)
      :async:

      Joins the voice channel


   .. py:method:: leave(self, ctx)
      :async:

      Disconnects from a voice channel


   .. py:method:: play(self, ctx, *, url)
      :async:

      Plays the requested music


   .. py:method:: pause(self, ctx)
      :async:

      Pauses the current music playing


   .. py:method:: resume(self, ctx)
      :async:

      Resumes music


   .. py:method:: stop(self, ctx)
      :async:

      Stops the Music Player


   .. py:method:: loop(self, ctx)
      :async:

      Iterates the current playing song


   .. py:method:: queue(self, ctx)
      :async:

      Displays the songs queue


   .. py:method:: np(self, ctx)
      :async:

      Gives info about current playing song


   .. py:method:: skip(self, ctx)
      :async:

      Skips the current playing song


   .. py:method:: volume(self, ctx, vol)
      :async:

      Changes the volume for the current song
      `Note: Negative volume numbers will be converted to 0`


   .. py:method:: remove_song(self, ctx, index)
      :async:

      Song the specified song using its index value


   .. py:method:: error_handler(self, ctx, error, *args, **kwargs)
      :async:



.. py:function:: setup(bot)
   :async:


